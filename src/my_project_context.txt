Here is a coding project I am working on.
It starts with the full structure of the project, then you will have each file title and file content.

Respond with 'OK' and for now, just understand the project completely.
I will ask for help in the next prompt so you can assist me with this project.



--- PROJECT STRUCTURE ---


{
    "/": {
        "App.css": {},
        "App.tsx": {},
        "App_v2.tsx": {},
        "index.css": {},
        "main.tsx": {},
        "my_project_context.txt": {},
        "vite-env.d.ts": {},
        "react.svg": {},
        "FileUploader.tsx": {},
        "Sidebar.tsx": {},
        "SuggestionCard.tsx": {},
        "api.ts": {}
    }
}


--- FILE : App.css ---


#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



--- FILE : App.tsx ---


/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/App.tsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import FileUploader from './components/FileUploader';
import SuggestionCard from './components/SuggestionCard';
import {
    initializeSystem,
    getAssistanceStreamUrl,
    getApiStatus,
    type InitResponse,
    type SSEEventData,
    type ValidatedSuggestionPackage
} from './services/api';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import {
    Upload, Settings, AlertTriangle, CheckCircle, Info, MessageSquare, Edit3, Loader2, Scissors, Eye, Edit, ShieldCheck, ListChecks, FileSignature, FileSearch2, User, Bot, Paperclip, Send, Copy, Check, X, SlidersHorizontal, Database, FolderOpenDot, MessageCircleQuestion, PlusCircle, ChevronsLeft, ChevronsRight, BookOpen, FileText, Save, History, Code, BrainCircuit
} from 'lucide-react';

// --- Type Definitions (largely same as before) ---
interface FallbackExtractedPdfResponse { status: string; pages?: Array<{ page_number: number; content: string }>; message?: string; document_info?: any; [key: string]: any; }
interface MarkerApiResponse { status: string; extracted_text?: string; message?: string; document_info?: any; [key: string]: any; }
interface ClientClauseInput { clause_id: string; text: string; }
interface ClauseValidationPayload { clause_id: string; original_text: string; scva_report: any; }
interface ClauseAiSuggestionPayload extends ValidatedSuggestionPackage { clause_id: string; }
interface LibraryPdfItem { name: string; type: "file" | "directory"; path?: string; files?: string[]; }
interface SessionInfo { session_id: string; path: string; has_fas_db: boolean; has_ss_db: boolean; last_modified: string; }
interface FullContractReviewReport { overall_assessment: string; contract_summary_by_ai: string; identified_clauses_with_issues: Array<{ original_clause_text_snippet: string; issue_or_concern: string; relevant_shariah_rule_ids?: string[]; recommended_action_or_modification: string; severity: "High - Clear Non-Compliance" | "Medium - Potential Risk/Ambiguity" | "Low - Suggestion for Enhancement" | "Information" | string; }>; general_recommendations?: string[]; overall_shariah_alignment_notes: string; error?: string; }
interface ClauseAnalysisResult { clause_id: string; original_text: string; validation_status?: string; validation_reason?: string; scva_report_original_clause?: any; ai_suggestions: ValidatedSuggestionPackage[]; processing_message?: string; skipped?: boolean; skipped_reason?: string; }

// --- Chat Message Type ---
type MessageSender = 'user' | 'ai' | 'system';
interface ChatMessage { id: string; sender: MessageSender; text?: string; component?: React.ReactNode; timestamp: Date; sseEvent?: SSEEventData; isLoading?: boolean; }

// --- Modal Types ---
type ModalType = null | 'init_system' | 'contract_clause_input' | 'contract_full_input';

// --- Page View Types ---
type PageView = 'chat' | 'fas_editor_page';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001';

const sampleSalamContractForHelper = { /* ... same sample contract ... */ 
    contract_type: "Salam",
    client_clauses_text: `Al Baraka Bank Algeria – Ouargla Branch, registered under RC 06B093, hereinafter referred to as “the Bank” or Rab al-Salam.
Al Nour Cooperative for Flour Production, located in Ghardaïa, represented by Mr. Amine Boukhatem, acting as purchasing manager, hereinafter referred to as “the Buyer” or Muslam Ilaihi.
Article 1 – Subject of the Contract
The Bank undertakes to deliver 100 quintals of durum wheat to the Buyer on a future date, in accordance with the Salam contract terms.
Article 2 – Payment
The Buyer shall pay 2,800,000 DZD (28,000 DZD per quintal) in full and immediately upon signature of the contract.
Payment is to be transferred to the Bank's designated Salam operations account.
Article 3 – Description of Goods (al-Muslam Fihi)
Commodity: Durum wheat
Variety: Certified “Boussalem”
Moisture: ≤ 12%
Impurities: ≤ 2%
Packaging: 100 kg sacks
Fungible commodity, defined by standard industrial specifications
Article 4 – Delivery
Delivery Date: July 15, 2025
Delivery Location: Warehouse of Al Nour Cooperative in Ghardaïa
The goods must fully comply with the specifications. Customary tolerances apply.
Article 5 – Provisions
No penalty for late delivery is allowed.
In case of inability to deliver on time, the Buyer may: Grant an extension; Or request a refund of the capital.`,
    overall_contract_context: "Initial Salam Credit Contract No. BCI-2025/Sal-102 for the delivery of 100 quintals of durum wheat by Al Baraka Bank Algeria to Al Nour Cooperative for Flour Production."
};

// --- Main App Component ---
const App: React.FC = () => {
  // --- UI & Navigation State ---
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [userInput, setUserInput] = useState<string>('');
  const [activeModal, setActiveModal] = useState<ModalType>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const [currentPageView, setCurrentPageView] = useState<PageView>('chat');
  const [isLeftSidebarOpen, setIsLeftSidebarOpen] = useState<boolean>(true);
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState<boolean>(true);

  // --- Initialization State ---
  const [isSystemInitialized, setIsSystemInitialized] = useState<boolean>(false);
  const [libraryPdfs, setLibraryPdfs] = useState<LibraryPdfItem[]>([]);
  const [availableSessions, setAvailableSessions] = useState<SessionInfo[]>([]);
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);
  // Modal-specific states for init form
  const [fasFilesForInitModal, setFasFilesForInitModal] = useState<FileList | null>(null);
  const [ssFilesForInitModal, setSsFilesForInitModal] = useState<FileList | null>(null);
  const [rulesFileForInitModal, setRulesFileForInitModal] = useState<File | null>(null);
  const [selectedLibraryFasModal, setSelectedLibraryFasModal] = useState<string[]>([]);
  const [selectedLibrarySsModal, setSelectedLibrarySsModal] = useState<string[]>([]);
  const [selectedSessionToLoadModal, setSelectedSessionToLoadModal] = useState<string>('');
  const [newSessionNameModal, setNewSessionNameModal] = useState<string>('');
  const [overwriteSessionModal, setOverwriteSessionModal] = useState<boolean>(false);


  // --- FAS Document State ---
  const [fasEditorInitialContent, setFasEditorInitialContent] = useState<string>('');
  const [fasEditorDocumentId, setFasEditorDocumentId] = useState<string>('');
  const [fasEditorSuggestions, setFasEditorSuggestions] = useState<ValidatedSuggestionPackage[]>([]);
  const [isFasSuggestionsLoading, setIsFasSuggestionsLoading] = useState<boolean>(false);
  const [suggestionToApplyToEditor, setSuggestionToApplyToEditor] = useState<ValidatedSuggestionPackage | null>(null);


  // --- Contract Helper State ---
  const [contractHelperMode, setContractHelperMode] = useState<'full_contract' | 'clause_by_clause'>('clause_by_clause');
  const [contractType, setContractType] = useState<string>(sampleSalamContractForHelper.contract_type);
  const [clientClausesInput, setClientClausesInput] = useState<string>(sampleSalamContractForHelper.client_clauses_text);
  const [fullContractTextInput, setFullContractTextInput] = useState<string>('');
  const [overallContractCtx, setOverallContractCtx] = useState<string>(sampleSalamContractForHelper.overall_contract_context);
  const [clauseAnalysisResults, setClauseAnalysisResults] = useState<ClauseAnalysisResult[]>([]);
  const [fullContractReviewReport, setFullContractReviewReport] = useState<FullContractReviewReport | null>(null);

  // --- API Interaction State ---
  const [isLoading, setIsLoading] = useState<boolean>(false); // General non-SSE loading
  const [isProcessingContract, setIsProcessingContract] = useState<boolean>(false);
  const [isExtractingText, setIsExtractingText] = useState<boolean>(false);
  const sseControllerRef = useRef<AbortController | null>(null);
  const [currentSseMessageId, setCurrentSseMessageId] = useState<string | null>(null);


  // --- Chat Utility Functions (addMessage, updateMessage, appendToMessage) ---
  const addMessage = (sender: MessageSender, text?: string, component?: React.ReactNode, isLoadingPlaceholder: boolean = false): string => { /* ... same ... */ 
    const newMessageId = `msg-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;
    setChatMessages(prev => [...prev, { id: newMessageId, sender, text, component, timestamp: new Date(), isLoading: isLoadingPlaceholder }]);
    return newMessageId;
  };
  const updateMessage = (messageId: string, newText?: string, newComponent?: React.ReactNode, stopLoading: boolean = false) => { /* ... same ... */ 
    setChatMessages(prev => prev.map(msg =>
      msg.id === messageId ? { ...msg, text: newText !== undefined ? newText : msg.text, component: newComponent !== undefined ? newComponent : msg.component, isLoading: stopLoading ? false : msg.isLoading } : msg
    ));
  };
  const appendToMessage = (messageId: string, textChunk: string, isSseEvent?: SSEEventData) => { /* ... same, ensuring it handles new suggestion types for chat ... */ 
    setChatMessages(prev => prev.map(msg => {
      if (msg.id === messageId) {
        let newText = (msg.text || "") + textChunk;
        let newComponent = msg.component;

        // This logic is for suggestions appearing in the MAIN CHAT.
        // FAS Editor suggestions are handled separately via fasEditorSuggestions state.
        if (isSseEvent && isSseEvent.event_type === "clause_ai_suggestion_generated" && isSseEvent.payload) {
            const suggestionPayload = isSseEvent.payload as ClauseAiSuggestionPayload;
             newText = ""; 
             newComponent = ( <> {msg.component} <div className="my-2"> <SuggestionCard suggestionPackage={suggestionPayload} onAccept={() => { navigator.clipboard.writeText(suggestionPayload.suggestion_details.proposed_text); addMessage('system', `Copied suggestion for clause ${suggestionPayload.clause_id}.`);}} onReject={() => { addMessage('system', `Rejected suggestion for clause ${suggestionPayload.clause_id}.`);}} /> </div> </> );
        } else if (isSseEvent && isSseEvent.event_type === "full_contract_review_completed" && isSseEvent.payload) {
            newText = ""; newComponent = renderFullContractReviewReportChat(isSseEvent.payload as FullContractReviewReport);
        }
        // Generic progress message
        else if (isSseEvent && isSseEvent.message && textChunk.includes(isSseEvent.message)) {
            // Text chunk already added newText, do nothing special for component
        }
        return { ...msg, text: newText, component: newComponent, isLoading: false, sseEvent: isSseEvent ?? msg.sseEvent };
      }
      return msg;
    }));
  };
  useEffect(() => { chatContainerRef.current?.scrollTo(0, chatContainerRef.current.scrollHeight); }, [chatMessages]);

  // --- Initial Load Effects ---
  useEffect(() => { /* ... same ... */ 
    addMessage('ai', "👋 Welcome to ASAVE Interactive Suite! Use the sidebars to get started or type 'help'.");
    getApiStatus().then(statusData => {
      if (statusData?.asave_initialized) setIsSystemInitialized(true);
    }).catch(error => addMessage('system', `Error: Could not connect to ASAVE API. (${(error as Error).message})`));
    fetchLibraryPdfsInternal();
    fetchSessionsInternal();
  }, []);

  // --- API Call Functions (fetchLibraryPdfsInternal, fetchSessionsInternal are same) ---
  const fetchLibraryPdfsInternal = async () => { /* ... same ... */ 
    try {
      const response = await axios.get(`${API_BASE_URL}/list_library_pdfs`);
      if (response.data.status === 'success') setLibraryPdfs(response.data.pdf_files);
      else addMessage('system', `Error fetching library PDFs: ${response.data.message}`);
    } catch (error: any) { addMessage('system', `Error fetching library PDFs: ${error.message}`); }
  };
  const fetchSessionsInternal = async () => { /* ... same ... */ 
    try {
      const response = await axios.get(`${API_BASE_URL}/list_sessions`);
      if (response.data.status === 'success') setAvailableSessions(response.data.sessions);
      else addMessage('system', `Error fetching sessions: ${response.data.message}`);
    } catch (error: any) { addMessage('system', `Error fetching sessions: ${error.message}`); }
  };

  const handleInitializeBackend = async (params: { /* Uses modal states now */ }) => {
    if (!selectedSessionToLoadModal && !fasFilesForInitModal && !ssFilesForInitModal && selectedLibraryFasModal.length === 0 && selectedLibrarySsModal.length === 0) {
      addMessage('ai', "To initialize, please select files to process or a session to load via the 'System Setup' modal."); return;
    }
    setIsLoading(true); // Use this for the modal's button
    const initMsgId = addMessage('ai', 'Initializing backend...', undefined, true); // Message in main chat
    const formData = new FormData();
    if (selectedSessionToLoadModal) formData.append('load_session_id', selectedSessionToLoadModal);
    else {
      if (newSessionNameModal) {
        formData.append('save_as_session_name', newSessionNameModal);
        if (overwriteSessionModal) formData.append('overwrite_session', 'true');
      }
      if (fasFilesForInitModal) Array.from(fasFilesForInitModal).forEach(f => formData.append('fas_files_upload', f, f.name));
      if (ssFilesForInitModal) Array.from(ssFilesForInitModal).forEach(f => formData.append('ss_files_upload', f, f.name));
      if (rulesFileForInitModal) formData.append('shariah_rules_explicit_file_upload', rulesFileForInitModal, rulesFileForInitModal.name);
      if (selectedLibraryFasModal?.length) formData.append('library_fas_filenames', JSON.stringify(selectedLibraryFasModal));
      if (selectedLibrarySsModal?.length) formData.append('library_ss_filenames', JSON.stringify(selectedLibrarySsModal));
    }

    try {
      const response = await axios.post<InitResponse & {session_id?: string}>(`${API_BASE_URL}/initialize`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
      const data = response.data;
      updateMessage(initMsgId, `Backend Init ${data.status}: ${data.message}`, undefined, true);
      if (data.status === 'success') {
        setIsSystemInitialized(true); setCurrentSessionId(data.session_id || null);
        addMessage('ai', `System initialized successfully. Session: ${data.session_id || 'default'}.`);
        fetchSessionsInternal();
        if (newSessionNameModal && !selectedSessionToLoadModal) setNewSessionNameModal('');
      } else { setIsSystemInitialized(false); setCurrentSessionId(null); }
    } catch (error: any) {
      updateMessage(initMsgId, `Initialization failed: ${error.response?.data?.message || error.message}`, undefined, true);
      setIsSystemInitialized(false); setCurrentSessionId(null);
    }
    setIsLoading(false); setActiveModal(null);
    // Reset modal form states
    setFasFilesForInitModal(null); setSsFilesForInitModal(null); setRulesFileForInitModal(null);
    setSelectedLibraryFasModal([]); setSelectedLibrarySsModal([]); setSelectedSessionToLoadModal(''); setOverwriteSessionModal(false);
  };

  const handleLoadSession = (sessionId: string) => {
    addMessage('user', `Load session: ${sessionId}`);
    // We'll trigger the init modal but pre-fill it for loading a session
    setSelectedSessionToLoadModal(sessionId);
    setNewSessionNameModal(''); // Clear new name if was set
    setActiveModal('init_system');
    // The modal's "Load Session" button will then call handleInitializeBackend
  };
  
  const handleCreateNewSessionFromSidebar = () => {
    setSelectedSessionToLoadModal(''); // Ensure load is cleared
    setNewSessionNameModal(''); // Clear for fresh input
    // Reset file selections for the modal
    setFasFilesForInitModal(null);
    setSsFilesForInitModal(null);
    setRulesFileForInitModal(null);
    setSelectedLibraryFasModal([]);
    setSelectedLibrarySsModal([]);
    setActiveModal('init_system');
  };


  const handleFasFileForEditor = async (file: File | null) => { /* ... same as before, sets fasEditorInitialContent, fasEditorDocumentId, and setCurrentPageView('fas_editor_page') ... */ 
    if (!file) { addMessage('ai', "No FAS file selected."); return; }
    setIsExtractingText(true); // For RightSidebar button state
    const processingMsgId = addMessage('ai', `Extracting text from ${file.name}...`, undefined, true); // Chat message
    const formData = new FormData(); formData.append('pdf_file', file);
    try {
      let markdownText = ''; let docInfo: any = { filename: file.name };
      try {
        const markerResponse = await axios.post<MarkerApiResponse>(`${API_BASE_URL}/extract_text_from_pdf_file_marker`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
        if (markerResponse.data.status === 'success' && typeof markerResponse.data.extracted_text === 'string') {
          markdownText = markerResponse.data.extracted_text; docInfo = markerResponse.data.document_info || markerResponse.data;
        } else { throw new Error(markerResponse.data.message || "Marker extraction failed"); }
      } catch (markerError) {
        updateMessage(processingMsgId, `Marker failed. Trying fallback for ${file.name}...`);
        const fallbackResponse = await axios.post<FallbackExtractedPdfResponse>(`${API_BASE_URL}/extract_text_from_pdf?reformat_ai=true`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
        if (fallbackResponse.data.status === 'success' && fallbackResponse.data.pages?.length) {
          markdownText = fallbackResponse.data.pages.map(p => `<!-- Page ${p.page_number} -->\n${p.content.trim()}`).join('\n\n<hr />\n\n');
          docInfo = fallbackResponse.data.document_info || docInfo;
        } else { throw new Error(fallbackResponse.data.message || "Fallback extraction failed"); }
      }
      updateMessage(processingMsgId, `Extraction complete for ${docInfo.filename || file.name}. Navigating to editor...`, undefined, true);
      setFasEditorInitialContent(markdownText.trimStart());
      setFasEditorDocumentId(docInfo.filename || file.name);
      setCurrentPageView('fas_editor_page');
    } catch (e: any) {
      updateMessage(processingMsgId, `PDF Processing Failed for FAS Editor: ${e.message}`, undefined, true);
    }
    setIsExtractingText(false);
  };


  const startSSEProcessing = useCallback( /* ... same as before ... */ 
    async ( url: string, payload: any, onEvent: (eventData: SSEEventData, sseMessageId: string) => void, onComplete: (sseMessageId: string) => void, onError: (error: Error, sseMessageId: string) => void, onFinally?: (sseMessageId: string) => void, isSilent: boolean = false ) => {
    let sseMessageId = '';
    if (!isSilent) { // Only add chat message if not silent (e.g. for FAS editor suggestions)
        sseMessageId = addMessage('ai', "🤖 AI processing requested...", undefined, true);
        setCurrentSseMessageId(sseMessageId); 
        appendToMessage(sseMessageId, "Thinking...🧠\n\n---\n");
    }

    if (sseControllerRef.current) sseControllerRef.current.abort();
    const controller = new AbortController(); sseControllerRef.current = controller;
    try {
      const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload), signal: controller.signal });
      if (!response.ok) { const et = await response.text(); throw new Error(`API Error: ${response.status} - ${et}`); }
      if (!response.body) throw new Error("No response body from API.");
      const reader = response.body.getReader(); const decoder = new TextDecoder(); let sseBuffer = '';
      
      async function processStream() {
        while (true) {
          try {
            const { done, value } = await reader.read();
            if (controller.signal.aborted) { 
                if (!isSilent && sseMessageId) appendToMessage(sseMessageId, "\n--- \n⏹️ AI processing cancelled by user."); 
                break; 
            }
            if (done) { onComplete(sseMessageId); break; } // Pass sseMessageId even if empty
            sseBuffer += decoder.decode(value, { stream: true });
            const messages = sseBuffer.split('\n\n'); sseBuffer = messages.pop() || '';
            messages.forEach(message => {
              if (message.startsWith('data: ')) {
                try {
                  const eventData = JSON.parse(message.substring(6)) as SSEEventData; onEvent(eventData, sseMessageId); // Pass sseMessageId
                } catch (e) { 
                    console.warn("SSE JSON Parse Error:", e, "Raw:", message); 
                    if(!isSilent && sseMessageId) appendToMessage(sseMessageId, `\n⚠️ Error parsing AI stream data.`); 
                }
              }
            });
          } catch (streamReadError: any) { onError(streamReadError, sseMessageId); break; }
        }
      }
      await processStream();
    } catch (error: any) { onError(error, sseMessageId); }
    finally { 
        if (onFinally) onFinally(sseMessageId); 
        if (sseMessageId === currentSseMessageId) setCurrentSseMessageId(null); 
        if (sseControllerRef.current === controller) sseControllerRef.current = null; 
    }
  }, [currentSseMessageId]); // Added currentSseMessageId as dependency

  const handleGetAIAssistanceForFASFromEditor = (selectedText: string, documentId: string, markdownContent: string) => {
    if (!selectedText.trim()) { addMessage('ai', "Please select text in the FAS editor to get suggestions."); return; }
    if (!isSystemInitialized && markdownContent) { addMessage('system', "Warning: Backend KB not initialized. AI suggestions might be limited."); }
    else if (!isSystemInitialized && !markdownContent) { addMessage('system', "Error: Please initialize the backend and load/process a FAS document first."); return; }
    
    setFasEditorSuggestions([]); // Clear previous editor suggestions
    setIsFasSuggestionsLoading(true); // For RightSidebar spinner

    const payload = { selected_text_from_fas: selectedText, fas_document_id: documentId };
    startSSEProcessing(
      getAssistanceStreamUrl(), payload,
      (eventData, sseMsgId_unused) => { // sseMsgId is not used here as we update fasEditorSuggestions state
        if (eventData.event_type === "validated_suggestion_package" && eventData.payload) {
            setFasEditorSuggestions(prev => [...prev, eventData.payload as ValidatedSuggestionPackage]);
        }
        // Optionally log progress to main chat silently if desired, or to a dedicated small log area in FasEditorPage
        if (eventData.message && eventData.event_type === "progress") {
            // For now, let's not spam main chat if editor is active.
            // console.log(`FAS Editor AI Progress: ${eventData.message}`);
        }
        if (eventData.event_type === "fatal_error") {
            addMessage('system', `FAS AI Error (Editor): ${eventData.message}`); // Show error in main chat for visibility
            setIsFasSuggestionsLoading(false);
            sseControllerRef.current?.abort();
        }
      },
      (sseMsgId_unused) => { // onComplete
        setIsFasSuggestionsLoading(false);
        // No main chat message needed, suggestions are in sidebar
      },
      (error, sseMsgId_unused) => { // onError
        setIsFasSuggestionsLoading(false);
        if (error.name !== 'AbortError') {
            addMessage('system', `FAS AI Assist Failed (Editor): ${error.message}`);
        } else {
            addMessage('system', "FAS AI assistance cancelled (Editor).");
        }
      },
      undefined, // onFinally
      true // isSilent = true (don't create initial chat message for this SSE stream)
    );
  };
  
  const handleAcceptFasEditorSuggestion = (suggestionToAccept: ValidatedSuggestionPackage) => {
    setSuggestionToApplyToEditor(suggestionToAccept); // Signal FasEditorPage
    setFasEditorSuggestions(prev => prev.filter(s => s !== suggestionToAccept)); // Remove from sidebar list
  };

  const handleRejectFasEditorSuggestion = (suggestionToReject: ValidatedSuggestionPackage) => {
    setFasEditorSuggestions(prev => prev.filter(s => s !== suggestionToReject));
    addMessage('system', `Suggestion from ${suggestionToReject.source_agent_name} rejected for FAS editor.`);
  };

  const handleFasSuggestionAppliedOrDismissedInEditor = () => {
    setSuggestionToApplyToEditor(null); // Reset the signal
  };

  const handleValidateContractTerms = () => { /* ... same core logic, ensures SSE updates main chat ... */ 
    if (!isSystemInitialized) { addMessage('ai', "Error: Please initialize the backend system first."); return; }
    let clausesForApi: ClientClauseInput[] = []; let contractTextForApi = "";
    if (contractHelperMode === 'clause_by_clause') {
        if (!clientClausesInput.trim()) { addMessage('ai', "Please enter contract clauses."); return; }
        clausesForApi = clientClausesInput.split('\n').map((text, index) => ({ clause_id: `user_c${index + 1}`, text: text.trim() })).filter(clause => clause.text.length > 0);
        if (!clausesForApi.length) { addMessage('ai', "No valid clauses parsed."); return; }
    } else {
        if (!fullContractTextInput.trim()) { addMessage('ai', "Please enter the full contract text."); return; }
        contractTextForApi = fullContractTextInput;
    }
    setActiveModal(null); setClauseAnalysisResults([]); setFullContractReviewReport(null); setIsProcessingContract(true);
    const endpoint = contractHelperMode === 'clause_by_clause' ? `${API_BASE_URL}/validate_contract_terms_stream` : `${API_BASE_URL}/review_full_contract_stream`;
    const payload = contractHelperMode === 'clause_by_clause' ? { contract_type: contractType, client_clauses: clausesForApi, overall_contract_context: overallContractCtx } : { full_contract_text: contractTextForApi, contract_type: contractType };
    startSSEProcessing( endpoint, payload,
      (eventData, sseMsgId) => { 
        if (eventData.message) appendToMessage(sseMsgId, `\n${eventData.agent_name || 'ContractAI'}: ${eventData.message}`);
        if (contractHelperMode === 'clause_by_clause') {
            if (eventData.event_type === "clause_validation_result" && eventData.payload) { 
                const data = eventData.payload as ClauseValidationPayload;
                appendToMessage(sseMsgId, `\n📋 Clause '${data.clause_id}': ${data.scva_report?.overall_status} - ${data.scva_report?.summary_explanation || 'Validated.'}`);
                 setClauseAnalysisResults(prev => { /* simple update for now, full report not shown in chat directly */
                    const existing = prev.find(r => r.clause_id === data.clause_id);
                    if (existing) return prev.map(r => r.clause_id === data.clause_id ? {...r, scva_report_original_clause: data.scva_report } : r);
                    return [...prev, { clause_id: data.clause_id, original_text: data.original_text, scva_report_original_clause: data.scva_report, ai_suggestions: [] }];
                });
            } else if (eventData.event_type === "clause_ai_suggestion_generated" && eventData.payload) {
                appendToMessage(sseMsgId, "", eventData); // appendToMessage handles card rendering in chat
                setClauseAnalysisResults(prev => prev.map(r => r.clause_id === (eventData.payload as ClauseAiSuggestionPayload).clause_id ? { ...r, ai_suggestions: [...r.ai_suggestions, eventData.payload as ClauseAiSuggestionPayload] } : r));
            }
        } else { if (eventData.event_type === "full_contract_review_completed" && eventData.payload) { appendToMessage(sseMsgId, "", eventData); } }
        if (eventData.event_type === "fatal_error") { appendToMessage(sseMsgId, `\n❌ Fatal Error: ${eventData.message}`); sseControllerRef.current?.abort(); }
      },
      (sseMsgId) => { appendToMessage(sseMsgId, "\n\n---\n✅ Contract review complete!"); setIsProcessingContract(false); },
      (error, sseMsgId) => { if (error.name !== 'AbortError') appendToMessage(sseMsgId, `\n❌ Contract Review Failed: ${error.message}`); else appendToMessage(sseMsgId, "\n⏹️ Contract review cancelled."); setIsProcessingContract(false); },
      () => setIsProcessingContract(false)
    );
  };
  
  // --- Chat Input Handler ---
  const handleUserChatInput = () => { /* ... same as before ... */ 
    const trimmedInput = userInput.trim().toLowerCase();
    if (!trimmedInput) return;
    addMessage('user', userInput); setUserInput('');

    if (trimmedInput === 'help') {
      addMessage('ai', undefined, <div className="space-y-1 text-sm"> <p>Common actions are available in the sidebars. You can also type:</p> <ul className="list-disc list-inside"> <li>'<strong>new session</strong>' (alternative to button)</li> <li>'<strong>list library</strong>'</li> </ul> <p>FAS Document editing and AI assistance are available on the 'FAS Editor Page' after loading a document.</p> </div> );
    } else if (trimmedInput === 'new session' || trimmedInput === 'create session') {
        handleCreateNewSessionFromSidebar(); // Use the same handler as the button
    } else if (trimmedInput === 'list library') {
        if (libraryPdfs.length > 0) { addMessage('ai', 'PDFs available in server library:', <div className="text-xs max-h-40 overflow-y-auto bg-slate-100 p-1 rounded">{libraryPdfs.map(item => <div key={item.name}>{item.type === 'file' ? `📄 ${item.name}` : `📁 ${item.name}/ ${item.files?.join(', ')}`}</div>)}</div> ); }
        else { addMessage('ai', "No PDF files found in the server library."); }
    }
    else {
      addMessage('ai', `I received: "${trimmedInput}". For specific actions, please use the controls in the sidebars or type 'help'.`);
    }
  };

  const renderFullContractReviewReportChat = (report: FullContractReviewReport | null) => { /* ... same as before ... */ 
    if (!report) return <p>No full contract review report available.</p>;
    if (report.error) return <p className="text-red-500">Error in report: {report.error}</p>;
    return (
      <div className="mt-2 space-y-3 p-3 bg-slate-100 rounded-md border border-slate-200 text-xs sm:text-sm">
        <h4 className="text-sm font-semibold text-sky-700">Full Contract Review Report</h4>
        <p className={`font-bold ${ report.overall_assessment?.toLowerCase().includes('revision') || report.overall_assessment?.toLowerCase().includes('issues') ? 'text-red-600' : 'text-green-600'}`}>
          Overall Assessment: {report.overall_assessment || 'N/A'}
        </p>
        <details> <summary className="cursor-pointer hover:text-sky-600 text-xs">AI Summary & Alignment Notes</summary> <div className="mt-1 pl-2 border-l-2 text-xs"> <p><strong>AI Summary:</strong> {report.contract_summary_by_ai || 'N/A'}</p> <p><strong>Shari'ah Alignment:</strong> {report.overall_shariah_alignment_notes || 'N/A'}</p> </div> </details>
        {report.identified_clauses_with_issues && report.identified_clauses_with_issues.length > 0 && (
          <div> <h5 className="font-medium text-slate-700 mt-1 mb-0.5 text-xs">Identified Issues:</h5> {report.identified_clauses_with_issues.map((issue, index) => ( <div key={index} className="p-1.5 border border-slate-200 rounded my-1 bg-white text-xs"> <p><span className={`px-1 py-0.5 text-[10px] rounded-full border ${ issue.severity?.toLowerCase().includes('high') ? 'text-red-600 bg-red-50 border-red-200' : issue.severity?.toLowerCase().includes('medium') ? 'text-amber-600 bg-amber-50 border-amber-200' : 'text-green-600 bg-green-50 border-green-200'}`}>Severity: {issue.severity}</span></p> <blockquote className="text-[11px] italic border-l-2 pl-1.5 my-0.5 bg-slate-50 max-h-16 overflow-y-auto">"{issue.original_clause_text_snippet}"</blockquote> <p><strong>Issue:</strong> {issue.issue_or_concern}</p> <p className="text-emerald-600"><strong>Recommendation:</strong> {issue.recommended_action_or_modification}</p> <button onClick={() => { navigator.clipboard.writeText(issue.recommended_action_or_modification || ''); addMessage('system', 'Copied recommendation.');}} className="text-[10px] mt-0.5 px-1 bg-sky-50 hover:bg-sky-100 text-sky-600 rounded-sm" disabled={!issue.recommended_action_or_modification}> <Copy size={10} className="inline mr-0.5"/> Copy Rec. </button> </div> ))} </div>
        )}
      </div>
    );
  };
  
  const onFasDocumentSaveFromEditor = (docId: string, newContent: string, summary: string) => {
    // This is called by FasEditorPage when IT saves a version.
    // App.tsx can choose to log this or refresh its own data if needed.
    addMessage('system', `📝 Version of '${docId}' saved via editor. Summary: "${summary}"`);
  };

  // --- Main Render ---
  return (
    <div className="flex flex-col h-screen bg-slate-100 text-slate-800 overflow-hidden">
      <header className="p-3 bg-sky-700 text-white flex justify-between items-center shadow-md shrink-0"> {/* ... same header ... */ }
        <div className="flex items-center">
            <button onClick={() => setIsLeftSidebarOpen(!isLeftSidebarOpen)} className="mr-2 p-1.5 hover:bg-sky-600 rounded-md">
                {isLeftSidebarOpen ? <ChevronsLeft size={20}/> : <ChevronsRight size={20}/>}
            </button>
            <MessageCircleQuestion size={26} className="mr-2 transform -scale-x-100" />
            <h1 className="text-lg font-bold">ASAVE Interactive Suite</h1>
            {currentSessionId && <span className="ml-3 text-xs px-2 py-0.5 bg-sky-500 rounded-full">Session: {currentSessionId}</span>}
        </div>
        <div className="flex items-center">
            {currentPageView === 'fas_editor_page' && (
                <button onClick={() => setCurrentPageView('chat')} className="mr-3 text-xs px-2.5 py-1 bg-sky-500 hover:bg-sky-400 rounded-md flex items-center">
                    <ChevronsLeft size={14} className="mr-1"/> Back to Chat
                </button>
            )}
            <button 
                onClick={() => { if ((currentSseMessageId || isFasSuggestionsLoading) && sseControllerRef.current) { sseControllerRef.current.abort(); setIsFasSuggestionsLoading(false); } else { addMessage('system', "No active AI task to cancel."); } }}
                disabled={!currentSseMessageId && !isFasSuggestionsLoading} // Cancel if main chat SSE or FAS suggestions loading
                className="text-xs px-2.5 py-1 bg-orange-500 hover:bg-orange-600 rounded-md shadow-sm disabled:opacity-50"
            >
                Cancel AI Task
            </button>
             <button onClick={() => setIsRightSidebarOpen(!isRightSidebarOpen)} className="ml-2 p-1.5 hover:bg-sky-600 rounded-md">
                {isRightSidebarOpen ? <ChevronsRight size={20}/> : <ChevronsLeft size={20}/>}
            </button>
        </div>
      </header>

      <div className="flex flex-row flex-grow min-h-0">
        <LeftSidebar isOpen={isLeftSidebarOpen} sessions={availableSessions} currentSessionId={currentSessionId} onLoadSession={handleLoadSession} onCreateNewSession={handleCreateNewSessionFromSidebar} onRefreshSessions={fetchSessionsInternal} />

        <main className="flex-grow flex flex-col bg-slate-200/50 overflow-hidden">
            {currentPageView === 'chat' && ( /* ... same chat rendering ... */ 
                 <>
                    <div ref={chatContainerRef} className="flex-grow p-3 space-y-3 overflow-y-auto scrollbar-thin">
                        {chatMessages.map((msg) => (
                        <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                            <div className={`max-w-[85%] p-2.5 rounded-xl shadow-sm text-sm ${ msg.sender === 'user' ? 'bg-sky-500 text-white rounded-br-none' : msg.sender === 'ai' ? 'bg-white text-slate-700 rounded-bl-none border border-slate-200' : 'bg-slate-100 text-slate-600 rounded-bl-none border border-slate-200' }`}>
                            <div className="flex items-center mb-1 text-xs opacity-70"> {msg.sender === 'user' ? <User size={12} className="mr-1" /> : msg.sender === 'ai' ? <Bot size={12} className="mr-1" /> : <Settings size={12} className="mr-1" />} <span>{msg.sender.toUpperCase()}</span><span className="mx-1.5 text-[9px]">●</span><span>{msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span> </div>
                            {msg.text && <p className="whitespace-pre-wrap leading-relaxed">{msg.text}</p>}
                            {msg.component && <div className="mt-1">{msg.component}</div>}
                            {msg.isLoading && <Loader2 size={16} className="animate-spin my-1 text-sky-500" />}
                            </div>
                        </div>
                        ))}
                    </div>
                    <footer className="p-2.5 border-t border-slate-300 bg-slate-50 shrink-0"> <div className="flex items-center space-x-2"> <input type="text" value={userInput} onChange={(e) => setUserInput(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleUserChatInput()} placeholder="Type your command or message..." className="flex-grow input-field py-2 px-3 text-sm"/> <button onClick={handleUserChatInput} className="btn-primary py-2 px-3.5"><Send size={18} /></button> </div> </footer>
                </>
            )}
            {currentPageView === 'fas_editor_page' && (
                <FasEditorPage
                    initialContent={fasEditorInitialContent}
                    documentId={fasEditorDocumentId}
                    sessionId={currentSessionId}
                    onGetAIAssistance={handleGetAIAssistanceForFASFromEditor}
                    onSaveRequest={onFasDocumentSaveFromEditor} // Renamed for clarity
                    suggestionToApply={suggestionToApplyToEditor}
                    onSuggestionHandled={handleFasSuggestionAppliedOrDismissedInEditor}
                />
            )}
        </main>

        <RightSidebar
            isOpen={isRightSidebarOpen}
            isSystemInitialized={isSystemInitialized}
            isLoadingFas={isExtractingText} // For initial load of FAS doc
            isLoadingContract={isProcessingContract}
            onSetupSystem={() => setActiveModal('init_system')}
            onLoadFas={(file) => { if (file) handleFasFileForEditor(file);}}
            onClauseContract={() => { setContractHelperMode('clause_by_clause'); setActiveModal('contract_clause_input'); }}
            onFullContract={() => { setContractHelperMode('full_contract'); setActiveModal('contract_full_input'); }}
            onLoadSampleContract={() => { /* ... same ... */ 
                 setContractType(sampleSalamContractForHelper.contract_type);
                 setClientClausesInput(sampleSalamContractForHelper.client_clauses_text);
                 setFullContractTextInput(sampleSalamContractForHelper.client_clauses_text);
                 setOverallContractCtx(sampleSalamContractForHelper.overall_contract_context);
                 addMessage('system', 'Sample Salam Contract loaded. Open relevant contract input modal from right sidebar.');
            }}
            isEditorViewActive={currentPageView === 'fas_editor_page'}
            fasEditorSuggestions={fasEditorSuggestions}
            isFasSuggestionsLoading={isFasSuggestionsLoading}
            onAcceptFasEditorSuggestion={handleAcceptFasEditorSuggestion}
            onRejectFasEditorSuggestion={handleRejectFasEditorSuggestion}
        />
      </div>

      {/* Modals (Init, Contract Inputs) */}
      {activeModal === 'init_system' && (
        <Modal title="System Setup & Session Management" onClose={() => setActiveModal(null)}>
             <div className="space-y-3 text-sm">
                <div> <h3 className="font-medium text-slate-600 mb-1 text-xs">Load Existing Session:</h3> <select value={selectedSessionToLoadModal} onChange={(e) => {setSelectedSessionToLoadModal(e.target.value); if(e.target.value) setNewSessionNameModal('');}} className="input-field text-xs"> <option value="">-- Select Session --</option> {availableSessions.map(s => <option key={s.session_id} value={s.session_id}>{s.session_id} (FAS:{s.has_fas_db?'✓':'✗'} SS:{s.has_ss_db?'✓':'✗'})</option>)} </select> <button onClick={fetchSessionsInternal} className="btn-secondary-small text-[11px] mt-1 ml-1 px-1.5 py-0.5">Refresh</button> </div>
                <hr/>
                <div> <label htmlFor="newSessionNameModalField" className="text-xs font-medium text-slate-600">Or, Create New Session Name:</label> <input type="text" id="newSessionNameModalField" value={newSessionNameModal} onChange={(e) => {setNewSessionNameModal(e.target.value); if(e.target.value) setSelectedSessionToLoadModal('');}} placeholder="e.g., MyProject_Q1" className="input-field text-xs mt-0.5" disabled={!!selectedSessionToLoadModal}/> {newSessionNameModal && <label className="text-xs flex items-center mt-1"><input type="checkbox" checked={overwriteSessionModal} onChange={(e) => setOverwriteSessionModal(e.target.checked)} className="mr-1"/> Overwrite if exists</label>} </div>
                <hr/>
                <p className="text-xs font-medium text-slate-600 -mb-1">Provide Knowledge Base Files (for new session or to add to loaded session):</p>
                <FileUploader label="FAS PDF(s)" accept=".pdf" multiple onFilesUploaded={setFasFilesForInitModal} id="modal-fas-init" />
                <FileUploader label="SS PDF(s)" accept=".pdf" multiple onFilesUploaded={setSsFilesForInitModal} id="modal-ss-init" />
                <FileUploader label="Rules JSON (Optional)" accept=".json" onFilesUploaded={(f) => setRulesFileForInitModal(f as File)} id="modal-rules-init" />
                {libraryPdfs.length > 0 && ( <div> <h3 className="text-xs font-medium text-slate-600 mb-0.5">Or Select from Server Library:</h3> <div className="grid grid-cols-2 gap-2 max-h-28 overflow-y-auto border p-1.5 rounded text-[11px]"> <div> <p className="font-semibold">FAS Library:</p> {libraryPdfs.filter(i => i.name.toLowerCase().includes('fas') || i.type === 'directory').map(item => renderLibraryItemCheckbox(item, selectedLibraryFasModal, setSelectedLibraryFasModal, 'fas'))} </div> <div> <p className="font-semibold">SS Library:</p> {libraryPdfs.filter(i => i.name.toLowerCase().includes('ss') || i.name.toLowerCase().includes('shariah') || i.type === 'directory').map(item => renderLibraryItemCheckbox(item, selectedLibrarySsModal, setSelectedLibrarySsModal, 'ss'))} </div> </div> </div> )}
                <button onClick={() => handleInitializeBackend({})} className="w-full btn-primary mt-2 py-2"> {isLoading ? <Loader2 className="inline mr-2 h-5 w-5 animate-spin"/> : '🚀 '} {selectedSessionToLoadModal ? `Load Session: ${selectedSessionToLoadModal}` : (newSessionNameModal ? `Create & Init: ${newSessionNameModal}`: 'Initialize Temporary')} </button>
            </div>
        </Modal>
      )}
      {activeModal === 'contract_clause_input' && ( /* ... same ... */ <Modal title="Contract Suite: Clause-by-Clause" onClose={() => setActiveModal(null)}> <div className="space-y-3 text-sm"> <div><label>Contract Type:</label><select value={contractType} onChange={e=>setContractType(e.target.value)} className="input-field"><option>Salam</option><option>Mudarabah</option><option>Murabaha</option><option>Ijarah</option></select></div> <div><label>Proposed Clauses (one per line):</label><textarea value={clientClausesInput} onChange={e=>setClientClausesInput(e.target.value)} rows={8} className="input-field font-mono text-xs" /></div> <div><label>Overall Context (Optional):</label><textarea value={overallContractCtx} onChange={e=>setOverallContractCtx(e.target.value)} rows={2} className="input-field" /></div> <button onClick={handleValidateContractTerms} className="w-full btn-teal">Validate Clauses</button> </div> </Modal> )}
      {activeModal === 'contract_full_input' && ( /* ... same ... */  <Modal title="Contract Suite: Full Contract Review" onClose={() => setActiveModal(null)}> <div className="space-y-3 text-sm"> <div><label>Contract Type:</label><select value={contractType} onChange={e=>setContractType(e.target.value)} className="input-field"><option>Salam</option><option>Mudarabah</option><option>Murabaha</option><option>Ijarah</option></select></div> <div><label>Full Contract Text:</label><textarea value={fullContractTextInput} onChange={e=>setFullContractTextInput(e.target.value)} rows={10} className="input-field font-mono text-xs" /></div> <div><label>Overall Context (Optional):</label><textarea value={overallContractCtx} onChange={e=>setOverallContractCtx(e.target.value)} rows={2} className="input-field" /></div> <button onClick={handleValidateContractTerms} className="w-full btn-teal">Review Full Contract</button> </div> </Modal> )}
    </div>
  );
};

// --- Sidebar & Page Components (Inline for simplicity) ---

interface LeftSidebarProps { /* ... same ... */ 
  isOpen: boolean;
  sessions: SessionInfo[];
  currentSessionId: string | null;
  onLoadSession: (sessionId: string) => void;
  onCreateNewSession: () => void;
  onRefreshSessions: () => void;
}
const LeftSidebar: React.FC<LeftSidebarProps> = ({ isOpen, sessions, currentSessionId, onLoadSession, onCreateNewSession, onRefreshSessions }) => { /* ... same ... */ 
  if (!isOpen) return null;
  return ( <aside className="w-64 bg-slate-50 border-r border-slate-300 p-3 flex flex-col shrink-0 text-sm space-y-3 scrollbar-thin overflow-y-auto"> <div className="flex justify-between items-center"> <h2 className="font-semibold text-slate-700 flex items-center"><Database size={16} className="mr-1.5 text-sky-600"/>Sessions</h2> <button onClick={onRefreshSessions} className="text-xs p-1 hover:bg-slate-200 rounded-md text-slate-500">Refresh</button> </div> <button onClick={onCreateNewSession} className="w-full btn-secondary-small flex items-center justify-center py-1.5 text-xs"> <PlusCircle size={14} className="mr-1.5"/> Create/Initialize New </button> {sessions.length > 0 ? ( <ul className="space-y-1.5 text-xs"> {sessions.map(s => ( <li key={s.session_id}> <button onClick={() => onLoadSession(s.session_id)} className={`w-full text-left p-1.5 rounded hover:bg-sky-100 ${s.session_id === currentSessionId ? 'bg-sky-100 border border-sky-500 font-medium text-sky-700' : 'border border-transparent'}`} title={`FAS: ${s.has_fas_db?'Yes':'No'}, SS: ${s.has_ss_db?'Yes':'No'}\nModified: ${s.last_modified}`}> <FolderOpenDot size={12} className="inline mr-1 opacity-70"/> {s.session_id} </button> </li> ))} </ul> ) : <p className="text-xs text-slate-500 italic">No saved sessions found.</p>} </aside> );
};

interface RightSidebarProps {
  isOpen: boolean;
  isSystemInitialized: boolean;
  isLoadingFas: boolean;
  isLoadingContract: boolean;
  onSetupSystem: () => void;
  onLoadFas: (file: File | null) => void;
  onClauseContract: () => void;
  onFullContract: () => void;
  onLoadSampleContract: () => void;
  // New props for FAS Editor suggestions
  isEditorViewActive: boolean;
  fasEditorSuggestions: ValidatedSuggestionPackage[];
  isFasSuggestionsLoading: boolean;
  onAcceptFasEditorSuggestion: (suggestion: ValidatedSuggestionPackage) => void;
  onRejectFasEditorSuggestion: (suggestion: ValidatedSuggestionPackage) => void;
}
const RightSidebar: React.FC<RightSidebarProps> = ({
  isOpen, isSystemInitialized, isLoadingFas, isLoadingContract,
  onSetupSystem, onLoadFas, onClauseContract, onFullContract, onLoadSampleContract,
  isEditorViewActive, fasEditorSuggestions, isFasSuggestionsLoading,
  onAcceptFasEditorSuggestion, onRejectFasEditorSuggestion
}) => {
  if (!isOpen) return null;
  const actionButtonClass = "w-full flex items-center text-sm p-2.5 rounded-md hover:bg-slate-200 transition-colors text-slate-700";
  const disabledClass = "opacity-50 cursor-not-allowed";

  return (
    <aside className="w-72 bg-slate-50 border-l border-slate-300 p-3 flex flex-col shrink-0 space-y-2 scrollbar-thin overflow-y-auto">
      <h2 className="font-semibold text-slate-700 mb-2 flex items-center text-sm"><Settings size={16} className="mr-1.5 text-sky-600"/>Controls</h2>
      <button onClick={onSetupSystem} className={`${actionButtonClass} bg-sky-50 hover:bg-sky-100`}> <SlidersHorizontal size={18} className="mr-2 text-sky-600"/> System Setup / Sessions </button>
      <hr/>
      <p className="text-xs font-medium text-slate-500 mt-1">FAS Document Suite</p>
      <FileUploader label="" accept=".pdf" onFilesUploaded={(files) => onLoadFas(files as File)} id="sidebar-fas-loader">
        <div className={`${actionButtonClass} ${(!isSystemInitialized || isLoadingFas) && disabledClass} group`}> {isLoadingFas ? <Loader2 size={18} className="mr-2 animate-spin text-sky-600"/> : <BookOpen size={18} className="mr-2 text-sky-600"/>} Load FAS PDF for Editor </div>
      </FileUploader>
      
      {isEditorViewActive && (
        <div className="mt-1 p-1.5 border-t border-slate-200">
            <p className="text-xs font-medium text-slate-500 mb-1 flex items-center">
                <BrainCircuit size={14} className="mr-1 text-purple-600"/> Editor AI Suggestions
            </p>
            {isFasSuggestionsLoading && <div className="flex justify-center py-2"><Loader2 size={20} className="animate-spin text-purple-500"/></div>}
            {!isFasSuggestionsLoading && fasEditorSuggestions.length === 0 && <p className="text-xs text-slate-400 italic">No suggestions yet. Select text in editor & click "Get Suggestions".</p>}
            {fasEditorSuggestions.length > 0 && (
                <div className="space-y-1.5 max-h-[calc(100vh-500px)] overflow-y-auto scrollbar-thin pr-0.5"> {/* Adjust max-h as needed */}
                    {fasEditorSuggestions.map((sugg, idx) => (
                        <SuggestionCard
                            key={`${sugg.source_agent_name}-${idx}-${sugg.suggestion_details.proposed_text.slice(0,10)}`} // More robust key
                            suggestionPackage={sugg}
                            onAccept={() => onAcceptFasEditorSuggestion(sugg)}
                            onReject={() => onRejectFasEditorSuggestion(sugg)}
                            // Add emojis here or within SuggestionCard based on sugg.reasoning if desired
                        />
                    ))}
                </div>
            )}
        </div>
      )}

      <hr className={`${isEditorViewActive ? 'mt-2' : ''}`}/>
      <p className="text-xs font-medium text-slate-500 mt-1">Shari'ah Contract Suite</p>
      {/* ... Contract suite buttons ... */}
      <button onClick={onClauseContract} className={`${actionButtonClass} ${(!isSystemInitialized || isLoadingContract) && disabledClass}`}> <ListChecks size={18} className="mr-2 text-teal-600"/> Clause-by-Clause Review </button>
      <button onClick={onFullContract} className={`${actionButtonClass} ${(!isSystemInitialized || isLoadingContract) && disabledClass}`}> <FileSearch2 size={18} className="mr-2 text-teal-600"/> Full Contract Review </button>
      <button onClick={onLoadSampleContract} className={`${actionButtonClass} border border-dashed border-slate-300 hover:border-teal-400`}> <FileSignature size={18} className="mr-2 text-teal-500"/> Load Sample Contract </button>
      {isLoadingContract && <div className="text-xs text-teal-600 flex items-center justify-center p-1"><Loader2 size={14} className="animate-spin mr-1"/>Contract AI Processing...</div>}
    </aside>
  );
};

// --- Placeholder for FasEditorPage ---
interface FasEditorPageProps {
  initialContent: string;
  documentId: string;
  sessionId: string | null;
  onGetAIAssistance: (selectedText: string, documentId: string, currentMarkdown: string) => void;
  onSaveRequest: (documentId: string, newContent: string, summary: string) => void;
  suggestionToApply: ValidatedSuggestionPackage | null;
  onSuggestionHandled: () => void;
}
const FasEditorPage: React.FC<FasEditorPageProps> = ({ 
    initialContent, documentId, sessionId, 
    onGetAIAssistance, onSaveRequest, 
    suggestionToApply, onSuggestionHandled 
}) => {
  const [markdownContent, setMarkdownContent] = useState<string>(initialContent);
  const [selectedEditorText, setSelectedEditorText] = useState<string>('');
  const editorRef = useRef<HTMLTextAreaElement>(null);
  const [viewMode, setViewMode] = useState<'edit' | 'preview'>('edit');
  const [versions, setVersions] = useState<any[]>([]);
  const [showVersionsModal, setShowVersionsModal] = useState(false);

  useEffect(() => { setMarkdownContent(initialContent); }, [initialContent]);
    
  useEffect(() => { /* ... same text selection logic ... */ 
    const editor = editorRef.current;
    if (viewMode === 'edit' && editor) {
      const updateSelection = () => { const selected = editor.value.substring(editor.selectionStart, editor.selectionEnd); if (selected.trim()) setSelectedEditorText(selected.trim()); else setSelectedEditorText(''); };
      editor.addEventListener('select', updateSelection); editor.addEventListener('keyup', updateSelection); editor.addEventListener('mouseup', updateSelection);
      return () => { editor.removeEventListener('select', updateSelection); editor.removeEventListener('keyup', updateSelection); editor.removeEventListener('mouseup', updateSelection); };
    } else { setSelectedEditorText(''); }
  }, [viewMode, markdownContent]);

  useEffect(() => {
    if (suggestionToApply && suggestionToApply.suggestion_details.proposed_text) {
      const original = suggestionToApply.suggestion_details.original_text || selectedEditorText;
      const proposed = suggestionToApply.suggestion_details.proposed_text;
      
      const currentEditorValue = editorRef.current?.value || markdownContent;
      const startIndex = currentEditorValue.indexOf(original);

      if (startIndex !== -1) {
        const newContent = currentEditorValue.substring(0, startIndex) + proposed + currentEditorValue.substring(startIndex + original.length);
        setMarkdownContent(newContent);
        if (editorRef.current) { // Ensure editorRef.current exists before using it
          const newCursorPos = startIndex + proposed.length;
          // Queue focus and selection update to after re-render
          setTimeout(() => {
            editorRef.current?.focus();
            editorRef.current?.setSelectionRange(newCursorPos, newCursorPos);
          }, 0);
        }
        setSelectedEditorText(proposed);
      } else {
        navigator.clipboard.writeText(proposed);
        alert("Original text snippet not found in editor. Proposed text copied to clipboard.");
      }
      onSuggestionHandled(); // Signal App.tsx to clear suggestionToApply
    }
  }, [suggestionToApply, onSuggestionHandled, selectedEditorText, markdownContent]); // Added markdownContent to deps

  const handleAIAssistClick = () => { /* ... same ... */ 
    if (selectedEditorText) onGetAIAssistance(selectedEditorText, documentId, markdownContent);
    else alert("Please select text in the editor first.");
  };
  
  const handleSaveCurrentVersion = async () => { /* ... same, calls onSaveRequest ... */ 
    if (!sessionId || !documentId) { alert("Session or document ID missing, cannot save."); return; }
    const summary = `Saved from editor: ${new Date().toLocaleString()}`;
    try {
        const response = await axios.post(`${API_BASE_URL}/document/${sessionId}/${documentId}/save_version`, { markdown_content: markdownContent, change_summary: summary });
        if (response.data.status === 'success') { alert(`Version ${response.data.version_id} saved!`); fetchVersions(); } 
        else { alert(`Failed to save version: ${response.data.message}`); }
        onSaveRequest(documentId, markdownContent, summary); 
    } catch (error: any) { alert(`Error saving version: ${error.response?.data?.message || error.message}`); }
  };
  const fetchVersions = async () => { /* ... same ... */ 
    if (!sessionId || !documentId) return;
    try {
        const response = await axios.get(`${API_BASE_URL}/document/${sessionId}/${documentId}/versions`);
        if (response.data.status === 'success') setVersions(response.data.versions);
        else alert(`Failed to fetch versions: ${response.data.message}`);
    } catch (error: any) { alert(`Error fetching versions: ${error.message}`); }
  };
  const handleRevertToVersion = async (versionId: string) => { /* ... same ... */ 
    if (!sessionId || !documentId) { alert("Cannot revert: Session/Doc ID missing."); return; }
    try {
        const response = await axios.post(`${API_BASE_URL}/document/${sessionId}/${documentId}/revert_to_version`, { version_id_to_revert_to: versionId });
        if (response.data.status === 'success') { setMarkdownContent(response.data.reverted_markdown_content); alert(`Reverted to version ${versionId}.`); fetchVersions(); setShowVersionsModal(false); } 
        else { alert(`Failed to revert: ${response.data.message}`); }
    } catch (error: any) { alert(`Error reverting: ${error.response?.data?.message || error.message}`); }
  };
  useEffect(() => { if(sessionId && documentId) fetchVersions(); }, [sessionId, documentId]);

  return ( /* ... same FasEditorPage JSX structure ... */ 
    <div className="p-4 h-full flex flex-col bg-white overflow-hidden">
      <h2 className="text-lg font-semibold text-slate-700 mb-2 shrink-0">FAS Editor: <span className="font-mono text-sky-600">{documentId}</span></h2>
      <div className="mb-2 space-x-2 shrink-0"> <button onClick={() => setViewMode('edit')} className={`btn-toggle ${viewMode === 'edit' ? 'btn-toggle-active' : ''}`}><Edit size={14}/> Edit</button> <button onClick={() => setViewMode('preview')} className={`btn-toggle ${viewMode === 'preview' ? 'btn-toggle-active' : ''}`}><Eye size={14}/> Preview</button> <button onClick={handleSaveCurrentVersion} className="btn-secondary-small"><Save size={14}/> Save Version</button> <button onClick={() => setShowVersionsModal(true)} className="btn-secondary-small"><History size={14}/> Versions ({versions.length})</button> <button onClick={handleAIAssistClick} className="btn-primary-small" disabled={!selectedEditorText}><MessageSquare size={14}/> Get Suggestions</button> </div>
      {selectedEditorText && viewMode === 'edit' && ( <div className="p-1.5 my-1 bg-sky-50 border border-sky-200 rounded-md text-xs shrink-0"> <p className="font-medium text-sky-700">Selected for AI:</p> <pre className="bg-white p-1 rounded max-h-16 overflow-y-auto text-[11px]"><code>{selectedEditorText}</code></pre> </div> )}
      <div className="flex-grow min-h-0"> {viewMode === 'edit' ? ( <textarea ref={editorRef} value={markdownContent} onChange={(e) => setMarkdownContent(e.target.value)} className="w-full h-full textarea-field text-sm font-mono resize-none"/> ) : ( <div className="w-full h-full markdown-preview p-2 border rounded bg-slate-50 text-sm overflow-y-auto scrollbar-thin"><ReactMarkdown remarkPlugins={[remarkGfm]}>{markdownContent || "No content."}</ReactMarkdown></div> )} </div>
      {showVersionsModal && ( <Modal title={`Versions for: ${documentId}`} onClose={() => setShowVersionsModal(false)}> {versions.length > 0 ? ( <ul className="space-y-1.5 text-xs max-h-80 overflow-y-auto"> {versions.map((v: any) => ( <li key={v.version_id} className="p-1.5 border rounded flex justify-between items-center hover:bg-slate-50"> <div> <p><strong>ID:</strong> {v.version_id}</p> <p className="text-[10px] text-slate-500">Saved: {new Date(v.timestamp).toLocaleString()}</p> <p className="text-[10px] italic">"{v.summary || "No summary"}"</p> </div> <button onClick={() => handleRevertToVersion(v.version_id)} className="btn-secondary-small text-[10px] px-1.5 py-0.5">Revert</button> </li> ))} </ul> ) : <p className="text-xs text-slate-500">No versions found.</p>} </Modal> )}
    </div>
  );
};

// --- Modal Component (same as before) ---
interface ModalProps { title: string; onClose: () => void; children: React.ReactNode; size?: 'normal' | 'large' | 'xlarge'; }
const Modal: React.FC<ModalProps> = ({ title, onClose, children, size = 'normal' }) => { /* ... same Modal code ... */ 
  let modalWidthClass = 'max-w-lg'; if (size === 'large') modalWidthClass = 'max-w-3xl'; if (size === 'xlarge') modalWidthClass = 'max-w-6xl';
  return ( <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex justify-center items-center z-50 p-4"> <div className={`bg-white rounded-lg shadow-xl w-full ${modalWidthClass} max-h-[90vh] flex flex-col`}> <div className="flex justify-between items-center p-3 border-b border-slate-200"> <h3 className="text-md font-semibold text-slate-700">{title}</h3> <button onClick={onClose} className="text-slate-400 hover:text-slate-600 p-1 rounded-full hover:bg-slate-100"> <X size={20} /> </button> </div> <div className="p-3 overflow-y-auto scrollbar-thin"> {children} </div> </div> </div> );
};

// Helper to render library item checkboxes (used in Init Modal)
const renderLibraryItemCheckbox = ( item: LibraryPdfItem, selectedArray: string[], setSelectedArray: React.Dispatch<React.SetStateAction<string[]>>, prefix: 'fas' | 'ss' ) => { /* ... same code ... */ 
    if (item.type === 'file') { return ( <div key={`${prefix}-${item.name}`} className="flex items-center"> <input type="checkbox" id={`${prefix}-lib-${item.name}`} value={item.name} checked={selectedArray.includes(item.name)} onChange={(e) => { const name = e.target.value; setSelectedArray(prev => e.target.checked ? [...prev, name] : prev.filter(n => n !== name)); }} className="mr-1 focus:ring-sky-500 h-3 w-3"/> <label htmlFor={`${prefix}-lib-${item.name}`} className="truncate">{item.name}</label> </div> ); } 
    else if (item.type === 'directory' && item.files) { return ( <div key={`${prefix}-dir-${item.name}`} className="ml-0.5 mt-0.5"> <p className="text-[10px] font-medium text-slate-500">{item.name}/</p> <div className="pl-1.5 border-l border-slate-200"> {item.files.map(f => ( <div key={`${prefix}-lib-${item.name}-${f}`} className="flex items-center"> <input type="checkbox" id={`${prefix}-lib-${item.name}-${f}`} value={`${item.name}/${f}`} checked={selectedArray.includes(`${item.name}/${f}`)} onChange={(e) => { const path = e.target.value; setSelectedArray(prev => e.target.checked ? [...prev, path] : prev.filter(n => n !== path)); }} className="mr-1 focus:ring-sky-500 h-3 w-3"/> <label htmlFor={`${prefix}-lib-${item.name}-${f}`} className="truncate">{f}</label> </div> ))} </div> </div> ); } 
    return null;
};

export default App;


--- FILE : App_v2.tsx ---


/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/App.tsx
import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import FileUploader from './components/FileUploader';
import SuggestionCard from './components/SuggestionCard';
import {
    // initializeSystem, // We'll use a more specific handler for init
    getAssistanceStreamUrl,
    getApiStatus,
    type InitResponse,
    type SSEEventData,
    type ValidatedSuggestionPackage,
    analyzeContextualUpdate // New import for CUA
} from './services/api';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import {
    Upload, Settings, AlertTriangle, CheckCircle, Info, MessageSquare, Edit3, Loader2, Eye, Edit, ShieldCheck, ListChecks, FileSignature, FileSearch2, User, Bot, Paperclip, Send, Copy, X, SlidersHorizontal, Database, FolderOpenDot, MessageCircleQuestion, PlusCircle, ChevronsLeft, ChevronsRight, BookOpen, FileText, Save, History, Code, BrainCircuit, Search, Percent, Lightbulb
} from 'lucide-react';

// --- Type Definitions ---
interface FallbackExtractedPdfResponse { status: string; pages?: Array<{ page_number: number; content: string }>; message?: string; document_info?: any; [key: string]: any; }
interface MarkerApiResponse { status: string; extracted_text?: string; message?: string; document_info?: any; [key: string]: any; }
interface ClientClauseInput { clause_id: string; text: string; }
interface ClauseValidationPayload { clause_id: string; original_text: string; scva_report: any; }
interface ClauseAiSuggestionPayload extends ValidatedSuggestionPackage { clause_id: string; } // Assumes ValidatedSuggestionPackage will include confidence in suggestion_details
interface LibraryPdfItem { name: string; type: "file" | "directory"; path?: string; files?: string[]; }
interface SessionInfo { session_id: string; path: string; has_fas_db: boolean; has_ss_db: boolean; last_modified: string; }
interface FullContractReviewReport { overall_assessment: string; contract_summary_by_ai: string; identified_clauses_with_issues: Array<{ original_clause_text_snippet: string; issue_or_concern: string; relevant_shariah_rule_ids?: string[]; recommended_action_or_modification: string; severity: "High - Clear Non-Compliance" | "Medium - Potential Risk/Ambiguity" | "Low - Suggestion for Enhancement" | "Information" | string; }>; general_recommendations?: string[]; overall_shariah_alignment_notes: string; error?: string; }
interface ClauseAnalysisResult { clause_id: string; original_text: string; validation_status?: string; validation_reason?: string; scva_report_original_clause?: any; ai_suggestions: ValidatedSuggestionPackage[]; processing_message?: string; skipped?: boolean; skipped_reason?: string; }

// Chat Message Type
type MessageSender = 'user' | 'ai' | 'system';
interface ChatMessage { id: string; sender: MessageSender; text?: string; component?: React.ReactNode; timestamp: Date; sseEvent?: SSEEventData; isLoading?: boolean; }

// Modal Types
type ModalType = null | 'init_system' | 'contract_clause_input' | 'contract_full_input' | 'contextual_update_input';

// Page View Types
type PageView = 'chat' | 'fas_editor_page';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001';

const sampleSalamContractForHelper = { /* ... same sample contract ... */ 
    contract_type: "Salam",
    client_clauses_text: `Al Baraka Bank Algeria – Ouargla Branch, registered under RC 06B093, hereinafter referred to as “the Bank” or Rab al-Salam.
Al Nour Cooperative for Flour Production, located in Ghardaïa, represented by Mr. Amine Boukhatem, acting as purchasing manager, hereinafter referred to as “the Buyer” or Muslam Ilaihi.
Article 1 – Subject of the Contract
The Bank undertakes to deliver 100 quintals of durum wheat to the Buyer on a future date, in accordance with the Salam contract terms.
Article 2 – Payment
The Buyer shall pay 2,800,000 DZD (28,000 DZD per quintal) in full and immediately upon signature of the contract.
Payment is to be transferred to the Bank's designated Salam operations account.
Article 3 – Description of Goods (al-Muslam Fihi)
Commodity: Durum wheat
Variety: Certified “Boussalem”
Moisture: ≤ 12%
Impurities: ≤ 2%
Packaging: 100 kg sacks
Fungible commodity, defined by standard industrial specifications
Article 4 – Delivery
Delivery Date: July 15, 2025
Delivery Location: Warehouse of Al Nour Cooperative in Ghardaïa
The goods must fully comply with the specifications. Customary tolerances apply.
Article 5 – Provisions
No penalty for late delivery is allowed.
In case of inability to deliver on time, the Buyer may: Grant an extension; Or request a refund of the capital.`,
    overall_contract_context: "Initial Salam Credit Contract No. BCI-2025/Sal-102 for the delivery of 100 quintals of durum wheat by Al Baraka Bank Algeria to Al Nour Cooperative for Flour Production."
};

// --- Main App Component ---
const App: React.FC = () => {
  // --- UI & Navigation State ---
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [userInput, setUserInput] = useState<string>('');
  const [activeModal, setActiveModal] = useState<ModalType>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const [currentPageView, setCurrentPageView] = useState<PageView>('chat');
  const [isLeftSidebarOpen, setIsLeftSidebarOpen] = useState<boolean>(true);
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState<boolean>(true);
  const [minConfidenceForHighlight, setMinConfidenceForHighlight] = useState<number>(75); // Default threshold

  // --- Initialization State ---
  const [isSystemInitialized, setIsSystemInitialized] = useState<boolean>(false);
  const [libraryPdfs, setLibraryPdfs] = useState<LibraryPdfItem[]>([]);
  const [availableSessions, setAvailableSessions] = useState<SessionInfo[]>([]);
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);
  const [fasFilesForInitModal, setFasFilesForInitModal] = useState<FileList | null>(null);
  const [ssFilesForInitModal, setSsFilesForInitModal] = useState<FileList | null>(null);
  const [rulesFileForInitModal, setRulesFileForInitModal] = useState<File | null>(null);
  const [selectedLibraryFasModal, setSelectedLibraryFasModal] = useState<string[]>([]);
  const [selectedLibrarySsModal, setSelectedLibrarySsModal] = useState<string[]>([]);
  const [selectedSessionToLoadModal, setSelectedSessionToLoadModal] = useState<string>('');
  const [newSessionNameModal, setNewSessionNameModal] = useState<string>('');
  const [overwriteSessionModal, setOverwriteSessionModal] = useState<boolean>(false);

  // --- FAS Document State ---
  const [fasEditorInitialContent, setFasEditorInitialContent] = useState<string>('');
  const [fasEditorDocumentId, setFasEditorDocumentId] = useState<string>('');
  const [fasEditorSuggestions, setFasEditorSuggestions] = useState<ValidatedSuggestionPackage[]>([]);
  const [isFasSuggestionsLoading, setIsFasSuggestionsLoading] = useState<boolean>(false);
  const [suggestionToApplyToEditor, setSuggestionToApplyToEditor] = useState<ValidatedSuggestionPackage | null>(null);

  // --- Contract Helper State ---
  const [contractHelperMode, setContractHelperMode] = useState<'full_contract' | 'clause_by_clause'>('clause_by_clause');
  const [contractType, setContractType] = useState<string>(sampleSalamContractForHelper.contract_type);
  const [clientClausesInput, setClientClausesInput] = useState<string>(sampleSalamContractForHelper.client_clauses_text);
  const [fullContractTextInput, setFullContractTextInput] = useState<string>('');
  const [overallContractCtx, setOverallContractCtx] = useState<string>(sampleSalamContractForHelper.overall_contract_context);
  const [clauseAnalysisResults, setClauseAnalysisResults] = useState<ClauseAnalysisResult[]>([]);
  const [fullContractReviewReport, setFullContractReviewReport] = useState<FullContractReviewReport | null>(null);
  const [contractSuggestionsForChat, setContractSuggestionsForChat] = useState<ValidatedSuggestionPackage[]>([]);


  // --- Contextual Update Agent State ---
  const [contextualUpdateTextModal, setContextualUpdateTextModal] = useState("");
  const [targetFasForUpdateModal, setTargetFasForUpdateModal] = useState("");
  const [knownFasDocumentIds, setKnownFasDocumentIds] = useState<string[]>([]); // To populate dropdown for CUA

  // --- API Interaction State ---
  const [isLoading, setIsLoading] = useState<boolean>(false); 
  const [isProcessingContract, setIsProcessingContract] = useState<boolean>(false);
  const [isExtractingText, setIsExtractingText] = useState<boolean>(false);
  const sseControllerRef = useRef<AbortController | null>(null);
  const [currentSseMessageId, setCurrentSseMessageId] = useState<string | null>(null);

  // --- Chat Utility Functions ---
  const addMessage = (sender: MessageSender, text?: string, component?: React.ReactNode, isLoadingPlaceholder: boolean = false): string => { /* ... same ... */ 
    const newMessageId = `msg-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;
    setChatMessages(prev => [...prev, { id: newMessageId, sender, text, component, timestamp: new Date(), isLoading: isLoadingPlaceholder }]);
    return newMessageId;
  };
  const updateMessage = (messageId: string, newText?: string, newComponent?: React.ReactNode, stopLoading: boolean = false) => { /* ... same ... */ 
     setChatMessages(prev => prev.map(msg => msg.id === messageId ? { ...msg, text: newText !== undefined ? newText : msg.text, component: newComponent !== undefined ? newComponent : msg.component, isLoading: stopLoading ? false : msg.isLoading } : msg ));
  };

  const appendToMessage = (messageId: string, textChunk: string, isSseEvent?: SSEEventData) => {
    setChatMessages(prev => prev.map(msg => {
      if (msg.id === messageId) {
        let newText = (msg.text || "") + textChunk;
        let newComponent = msg.component;

        if (isSseEvent && isSseEvent.event_type === "clause_ai_suggestion_generated" && isSseEvent.payload) {
            const suggestionPayload = isSseEvent.payload as ClauseAiSuggestionPayload;
            setContractSuggestionsForChat(prevSugg => [...prevSugg, suggestionPayload]); // Add to list for highlighting logic
            // Component rendering for chat will be handled by a separate mapping over contractSuggestionsForChat
            newText += `\nℹ️ AI Suggestion from ${suggestionPayload.source_agent_name} (Confidence: ${suggestionPayload.suggestion_details.confidence_score || 'N/A'}%) received. It will appear below or in a dedicated section.`;
        } else if (isSseEvent && isSseEvent.event_type === "full_contract_review_completed" && isSseEvent.payload) {
            newText = ""; newComponent = renderFullContractReviewReportChat(isSseEvent.payload as FullContractReviewReport);
        } else if (isSseEvent && isSseEvent.message && textChunk.includes(isSseEvent.message)) {
            // Simple progress, text already part of textChunk
        }
        return { ...msg, text: newText, component: newComponent, isLoading: false, sseEvent: isSseEvent ?? msg.sseEvent };
      }
      return msg;
    }));
  };
  useEffect(() => { chatContainerRef.current?.scrollTo(0, chatContainerRef.current.scrollHeight); }, [chatMessages]);

  // --- Initial Load ---
  useEffect(() => { /* ... same ... */ 
    addMessage('ai', "👋 Welcome to ASAVE Interactive Suite! Use the sidebars to get started or type 'help'.");
    getApiStatus().then(statusData => {
      if (statusData?.asave_initialized) {
        setIsSystemInitialized(true);
        if(statusData.current_session_id) setCurrentSessionId(statusData.current_session_id);
      }
    }).catch(error => addMessage('system', `Error: Could not connect to ASAVE API. (${(error as Error).message})`));
    fetchLibraryPdfsInternal();
    fetchSessionsInternal();
  }, []);
  
  // Update knownFasDocumentIds when fasEditorDocumentId changes (e.g., after loading a new doc)
  useEffect(() => {
    if (fasEditorDocumentId && !knownFasDocumentIds.includes(fasEditorDocumentId)) {
      setKnownFasDocumentIds(prev => [...prev, fasEditorDocumentId]);
    }
  }, [fasEditorDocumentId, knownFasDocumentIds]);


  // --- API Call Functions ---
  const fetchLibraryPdfsInternal = async () => { /* ... same ... */ 
    try { const response = await axios.get(`${API_BASE_URL}/list_library_pdfs`); if (response.data.status === 'success') setLibraryPdfs(response.data.pdf_files); else addMessage('system', `Error fetching library PDFs: ${response.data.message}`); } catch (error: any) { addMessage('system', `Error fetching library PDFs: ${error.message}`); }
  };
  const fetchSessionsInternal = async () => { /* ... same ... */ 
    try { const response = await axios.get(`${API_BASE_URL}/list_sessions`); if (response.data.status === 'success') setAvailableSessions(response.data.sessions); else addMessage('system', `Error fetching sessions: ${response.data.message}`); } catch (error: any) { addMessage('system', `Error fetching sessions: ${error.message}`); }
  };

  const handleInitializeBackend = async () => { /* Uses modal states like fasFilesForInitModal */ 
    if (!selectedSessionToLoadModal && !fasFilesForInitModal && !ssFilesForInitModal && selectedLibraryFasModal.length === 0 && selectedLibrarySsModal.length === 0) { addMessage('ai', "To initialize, please select files to process or a session to load via the 'System Setup' modal."); return; }
    setIsLoading(true); const initMsgId = addMessage('ai', 'Initializing backend...', undefined, true);
    const formData = new FormData();
    if (selectedSessionToLoadModal) formData.append('load_session_id', selectedSessionToLoadModal);
    else {
      if (newSessionNameModal) { formData.append('save_as_session_name', newSessionNameModal); if (overwriteSessionModal) formData.append('overwrite_session', 'true'); }
      if (fasFilesForInitModal) Array.from(fasFilesForInitModal).forEach(f => formData.append('fas_files_upload', f, f.name));
      if (ssFilesForInitModal) Array.from(ssFilesForInitModal).forEach(f => formData.append('ss_files_upload', f, f.name));
      if (rulesFileForInitModal) formData.append('shariah_rules_explicit_file_upload', rulesFileForInitModal, rulesFileForInitModal.name);
      if (selectedLibraryFasModal?.length) formData.append('library_fas_filenames', JSON.stringify(selectedLibraryFasModal));
      if (selectedLibrarySsModal?.length) formData.append('library_ss_filenames', JSON.stringify(selectedLibrarySsModal));
    }
    try {
      const response = await axios.post<InitResponse>(`${API_BASE_URL}/initialize`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
      const data = response.data; updateMessage(initMsgId, `Backend Init ${data.status}: ${data.message}`, undefined, true);
      if (data.status === 'success') { setIsSystemInitialized(true); setCurrentSessionId(data.session_id || null); addMessage('ai', `System initialized. Session: ${data.session_id || 'default'}.`); fetchSessionsInternal(); if (newSessionNameModal && !selectedSessionToLoadModal) setNewSessionNameModal(''); } 
      else { setIsSystemInitialized(false); setCurrentSessionId(null); }
    } catch (error: any) { updateMessage(initMsgId, `Initialization failed: ${error.response?.data?.message || error.message}`, undefined, true); setIsSystemInitialized(false); setCurrentSessionId(null); }
    setIsLoading(false); setActiveModal(null);
    setFasFilesForInitModal(null); setSsFilesForInitModal(null); setRulesFileForInitModal(null); setSelectedLibraryFasModal([]); setSelectedLibrarySsModal([]); setSelectedSessionToLoadModal(''); setOverwriteSessionModal(false);
  };

  const handleLoadSession = (sessionId: string) => { /* ... same, sets modal states ... */ 
    addMessage('user', `Load session: ${sessionId}`); setSelectedSessionToLoadModal(sessionId); setNewSessionNameModal(''); setActiveModal('init_system');
  };
  const handleCreateNewSessionFromSidebar = () => { /* ... same, clears modal states ... */ 
    setSelectedSessionToLoadModal(''); setNewSessionNameModal(''); setFasFilesForInitModal(null); setSsFilesForInitModal(null); setRulesFileForInitModal(null); setSelectedLibraryFasModal([]); setSelectedLibrarySsModal([]); setActiveModal('init_system');
  };
  const handleFasFileForEditor = async (file: File | null) => { /* ... same, but updates knownFasDocumentIds ... */ 
    if (!file) { addMessage('ai', "No FAS file selected."); return; }
    setIsExtractingText(true); const processingMsgId = addMessage('ai', `Extracting text from ${file.name}...`, undefined, true);
    const formData = new FormData(); formData.append('pdf_file', file);
    try {
      let markdownText = ''; let docInfo: any = { filename: file.name };
      try {
        const markerResponse = await axios.post<MarkerApiResponse>(`${API_BASE_URL}/extract_text_from_pdf_file_marker`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
        if (markerResponse.data.status === 'success' && typeof markerResponse.data.extracted_text === 'string') { markdownText = markerResponse.data.extracted_text; docInfo = markerResponse.data.document_info || { filename: file.name, ...markerResponse.data };} 
        else { throw new Error(markerResponse.data.message || "Marker extraction failed"); }
      } catch (markerError) {
        updateMessage(processingMsgId, `Marker failed. Trying fallback for ${file.name}...`);
        const fallbackResponse = await axios.post<FallbackExtractedPdfResponse>(`${API_BASE_URL}/extract_text_from_pdf?reformat_ai=true`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
        if (fallbackResponse.data.status === 'success' && fallbackResponse.data.pages?.length) { markdownText = fallbackResponse.data.pages.map(p => `<!-- Page ${p.page_number} -->\n${p.content.trim()}`).join('\n\n<hr />\n\n'); docInfo = fallbackResponse.data.document_info || { filename: file.name, ...fallbackResponse.data };} 
        else { throw new Error(fallbackResponse.data.message || "Fallback extraction failed"); }
      }
      const finalDocumentId = (docInfo && docInfo.filename) ? docInfo.filename : file.name;
      if (!finalDocumentId || finalDocumentId.trim() === "") { updateMessage(processingMsgId, `PDF Processing Error: Could not determine document ID for ${file.name}.`, undefined, true); setIsExtractingText(false); return; }
      updateMessage(processingMsgId, `Extraction complete for ${finalDocumentId}. Navigating to editor...`, undefined, true);
      setFasEditorInitialContent(markdownText.trimStart()); setFasEditorDocumentId(finalDocumentId);
      if (finalDocumentId && !knownFasDocumentIds.includes(finalDocumentId)) setKnownFasDocumentIds(prev => [...prev, finalDocumentId]); // Add to known docs for CUA
      setCurrentPageView('fas_editor_page');
    } catch (e: any) { updateMessage(processingMsgId, `PDF Processing Failed for FAS Editor: ${e.message}`, undefined, true); }
    setIsExtractingText(false);
  };

  // --- SSE Processing ---
  const startSSEProcessing = useCallback( /* ... same as before ... */ 
    async ( url: string, payload: any, onEvent: (eventData: SSEEventData, sseMessageId: string) => void, onComplete: (sseMessageId: string) => void, onError: (error: Error, sseMessageId: string) => void, onFinally?: (sseMessageId: string) => void, isSilent: boolean = false ) => {
    let sseMessageId = ''; if (!isSilent) { sseMessageId = addMessage('ai', "🤖 AI processing requested...", undefined, true); setCurrentSseMessageId(sseMessageId); appendToMessage(sseMessageId, "Thinking...🧠\n\n---\n"); }
    if (sseControllerRef.current) sseControllerRef.current.abort(); const controller = new AbortController(); sseControllerRef.current = controller;
    try {
      const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload), signal: controller.signal });
      if (!response.ok) { const et = await response.text(); throw new Error(`API Error: ${response.status} - ${et}`); }
      if (!response.body) throw new Error("No response body from API.");
      const reader = response.body.getReader(); const decoder = new TextDecoder(); let sseBuffer = '';
      async function processStream() { while (true) { try { const { done, value } = await reader.read(); if (controller.signal.aborted) { if (!isSilent && sseMessageId) appendToMessage(sseMessageId, "\n--- \n⏹️ AI processing cancelled by user."); break; } if (done) { onComplete(sseMessageId); break; } sseBuffer += decoder.decode(value, { stream: true }); const messages = sseBuffer.split('\n\n'); sseBuffer = messages.pop() || ''; messages.forEach(message => { if (message.startsWith('data: ')) { try { const eventData = JSON.parse(message.substring(6)) as SSEEventData; onEvent(eventData, sseMessageId); } catch (e) { console.warn("SSE JSON Parse Error:", e, "Raw:", message); if(!isSilent && sseMessageId) appendToMessage(sseMessageId, `\n⚠️ Error parsing AI stream data.`); } } }); } catch (streamReadError: any) { onError(streamReadError, sseMessageId); break; } } } await processStream();
    } catch (error: any) { onError(error, sseMessageId); }
    finally { if (onFinally) onFinally(sseMessageId); if (sseMessageId === currentSseMessageId) setCurrentSseMessageId(null); if (sseControllerRef.current === controller) sseControllerRef.current = null; }
  }, [currentSseMessageId]);

  const handleGetAIAssistanceForFASFromEditor = (selectedText: string, documentId: string, markdownContent: string) => { /* ... same, but sets fasEditorSuggestions and isFasSuggestionsLoading ... */ 
    if (!selectedText.trim()) { sendSystemNotification("Please select text in the FAS editor to get suggestions.", "info"); return; }
    if (!isSystemInitialized && markdownContent) { sendSystemNotification("Warning: Backend KB not initialized. AI suggestions might be limited.", "info"); }
    else if (!isSystemInitialized && !markdownContent) { sendSystemNotification("Error: Please initialize the backend and load/process a FAS document first.", "error"); return; }
    setFasEditorSuggestions([]); setIsFasSuggestionsLoading(true);
    const payload = { selected_text_from_fas: selectedText, fas_document_id: documentId };
    startSSEProcessing( getAssistanceStreamUrl(), payload,
      (eventData, _sseMsgId) => {
        if (eventData.event_type === "validated_suggestion_package" && eventData.payload) { setFasEditorSuggestions(prev => [...prev, eventData.payload as ValidatedSuggestionPackage]); }
        if (eventData.event_type === "fatal_error") { sendSystemNotification(`FAS AI Error (Editor): ${eventData.message}`, "error"); setIsFasSuggestionsLoading(false); sseControllerRef.current?.abort(); }
      },
      (_sseMsgId) => { setIsFasSuggestionsLoading(false); sendSystemNotification("FAS AI analysis complete for editor.", "success"); },
      (error, _sseMsgId) => { setIsFasSuggestionsLoading(false); if (error.name !== 'AbortError') sendSystemNotification(`FAS AI Assist Failed (Editor): ${error.message}`, "error"); else sendSystemNotification("FAS AI assistance cancelled (Editor).", "info"); },
      undefined, true // isSilent = true
    );
  };
  
  const handleAcceptFasEditorSuggestion = (suggestionToAccept: ValidatedSuggestionPackage) => { /* ... same ... */ 
    setSuggestionToApplyToEditor(suggestionToAccept); setFasEditorSuggestions(prev => prev.filter(s => s !== suggestionToAccept)); 
  };
  const handleRejectFasEditorSuggestion = (suggestionToReject: ValidatedSuggestionPackage) => { /* ... same ... */ 
    setFasEditorSuggestions(prev => prev.filter(s => s !== suggestionToReject)); sendSystemNotification(`Suggestion from ${suggestionToReject.source_agent_name} rejected for FAS editor.`, "info");
  };
  const handleFasSuggestionAppliedOrDismissedInEditor = () => { /* ... same ... */ 
    setSuggestionToApplyToEditor(null); 
  };

  const handleValidateContractTerms = () => { /* ... main logic same, but now uses setContractSuggestionsForChat ... */ 
    if (!isSystemInitialized) { addMessage('ai', "Error: Please initialize the backend system first."); return; }
    // ... (payload prep) ...
    setActiveModal(null); setClauseAnalysisResults([]); setFullContractReviewReport(null); setContractSuggestionsForChat([]); // Clear contract suggestions
    setIsProcessingContract(true);
    const endpoint = contractHelperMode === 'clause_by_clause' ? `${API_BASE_URL}/validate_contract_terms_stream` : `${API_BASE_URL}/review_full_contract_stream`;
    const payload = contractHelperMode === 'clause_by_clause' ? { contract_type: contractType, client_clauses: clientClausesInput.split('\n').map((t,i)=>({clause_id:`c${i}`, text:t})).filter(c=>c.text.trim()), overall_contract_context: overallContractCtx } : { full_contract_text: fullContractTextInput, contract_type: contractType };
    startSSEProcessing( endpoint, payload,
      (eventData, sseMsgId) => { 
        if (eventData.message) appendToMessage(sseMsgId, `\n${eventData.agent_name || 'ContractAI'}: ${eventData.message}`);
        if (contractHelperMode === 'clause_by_clause') {
            if (eventData.event_type === "clause_validation_result" && eventData.payload) { const data = eventData.payload as ClauseValidationPayload; appendToMessage(sseMsgId, `\n📋 Clause '${data.clause_id}': ${data.scva_report?.overall_status} - ${data.scva_report?.summary_explanation || 'Validated.'}`); } 
            else if (eventData.event_type === "clause_ai_suggestion_generated" && eventData.payload) {
                 setContractSuggestionsForChat(prev => [...prev, eventData.payload as ClauseAiSuggestionPayload]); // Add to list
                 // A small note in chat, actual card rendered via mapping contractSuggestionsForChat
                 appendToMessage(sseMsgId, `\n💡 Suggestion for clause '${(eventData.payload as ClauseAiSuggestionPayload).clause_id}' received (Confidence: ${ (eventData.payload as ClauseAiSuggestionPayload).suggestion_details.confidence_score || 'N/A'}%).`);
            }
        } else { if (eventData.event_type === "full_contract_review_completed" && eventData.payload) { appendToMessage(sseMsgId, "", eventData); } }
        if (eventData.event_type === "fatal_error") { appendToMessage(sseMsgId, `\n❌ Fatal Error: ${eventData.message}`); sseControllerRef.current?.abort(); }
      },
      (sseMsgId) => { appendToMessage(sseMsgId, "\n\n---\n✅ Contract review process finished!"); setIsProcessingContract(false); },
      (error, sseMsgId) => { if (error.name !== 'AbortError') appendToMessage(sseMsgId, `\n❌ Contract Review Failed: ${error.message}`); else appendToMessage(sseMsgId, "\n⏹️ Contract review cancelled."); setIsProcessingContract(false); },
      () => setIsProcessingContract(false)
    );
  };
  
  const sendSystemNotification = (message: string, type: 'info' | 'error' | 'success' = 'info') => { addMessage('system', `🔔 ${type.toUpperCase()}: ${message}`); };
  const onFasDocumentSaveFromEditor = (docId: string, _newContent: string, summary: string) => { sendSystemNotification(`Version of '${docId}' saved via editor. Summary: "${summary}"`, "success"); };

  // --- Chat Input Handler ---
  const handleUserChatInput = () => { /* ... same ... */ 
    const trimmedInput = userInput.trim().toLowerCase(); if (!trimmedInput) return; addMessage('user', userInput); setUserInput('');
    if (trimmedInput === 'help') { addMessage('ai', undefined, <div className="space-y-1 text-sm"> <p>Common actions are in sidebars. You can also type:</p> <ul className="list-disc list-inside"> <li>'<strong>new session</strong>'</li> <li>'<strong>list library</strong>'</li> <li>'<strong>contextual update</strong>' or '<strong>analyze context</strong>'</li></ul> </div> ); } 
    else if (trimmedInput === 'new session' || trimmedInput === 'create session') { handleCreateNewSessionFromSidebar(); } 
    else if (trimmedInput === 'list library') { /* ... same ... */ }
    else if (trimmedInput === 'contextual update' || trimmedInput === 'analyze context') { setActiveModal('contextual_update_input'); setContextualUpdateTextModal(''); if(knownFasDocumentIds.length > 0) setTargetFasForUpdateModal(knownFasDocumentIds[0]); else setTargetFasForUpdateModal(''); }
    else { addMessage('ai', `I received: "${trimmedInput}". For specific actions, please use controls or 'help'.`); }
  };

  // --- Contextual Update Agent Handler ---
  const handleProcessContextualUpdate = async () => {
    if (!contextualUpdateTextModal.trim() || !targetFasForUpdateModal.trim()) {
        addMessage('ai', "Please provide both the new contextual text and select a target FAS document in the modal."); return;
    }
    setActiveModal(null);
    addMessage('user', `Analyze impact of new context on FAS: ${targetFasForUpdateModal}`);
    const analysisMsgId = addMessage('ai', `Analyzing impact on ${targetFasForUpdateModal}...`, undefined, true);
    setIsLoading(true);
    try {
        const response = await analyzeContextualUpdate({ new_context_text: contextualUpdateTextModal, target_document_id: targetFasForUpdateModal });
        if (response.status === 'success') { updateMessage(analysisMsgId, undefined, renderCuaAnalysisChat(response.analysis), true); } 
        else { updateMessage(analysisMsgId, `Error analyzing context: ${response.message || 'Unknown error'}`, undefined, true); }
    } catch (error: any) { updateMessage(analysisMsgId, `Failed to analyze context: ${error.response?.data?.message || error.message}`, undefined, true); }
    finally { setIsLoading(false); }
  };

  // Render helpers for CUA analysis and Contract suggestions in chat
  const renderCuaAnalysisChat = (analysis: any) => { /* ... same as before, for chat ... */ 
    if (!analysis || analysis.error) return <p className="text-red-500">Error in CUA Analysis: {analysis?.error || "Unknown error"}</p>;
    return ( <div className="text-xs space-y-1 p-2 bg-indigo-50 border border-indigo-200 rounded max-h-80 overflow-y-auto scrollbar-thin"> <h5 className="font-semibold text-indigo-700 text-sm">Contextual Update Analysis</h5> <p><strong>Overall Assessment:</strong> {analysis.overall_assessment}</p> {/* ... rest of CUA display ... */} </div> );
  };
  const renderFullContractReviewReportChat = (report: FullContractReviewReport | null) => { /* ... same as before ... */ 
     if (!report) return <p>No full contract review report.</p>; if (report.error) return <p className="text-red-500">Error: {report.error}</p>; return ( <div className="mt-2 space-y-2 p-2 bg-slate-100 rounded border text-xs"> <h4 className="text-sm font-semibold text-sky-700">Full Contract Review</h4> {/* ... rest of report display ... */} </div> );
  };
  
  // Memoized calculation for highlighted contract suggestion
  const highlightedContractSuggestionId = useMemo(() => {
    if (!contractSuggestionsForChat.length) return null;
    let highestConfidence = -1;
    let bestSuggestionId: string | null = null; // Assuming suggestions have a unique ID or we use index
    contractSuggestionsForChat.forEach((sugg, index) => {
        const score = sugg.suggestion_details.confidence_score ?? 0;
        if (score >= minConfidenceForHighlight && score > highestConfidence) {
            highestConfidence = score;
            bestSuggestionId = `${sugg.source_agent_name}-${sugg.clause_id}-${index}`; // Create a pseudo-ID
        }
    });
    return bestSuggestionId;
  }, [contractSuggestionsForChat, minConfidenceForHighlight]);


  // --- Main Render ---
  return (
    <div className="flex flex-col h-screen bg-slate-100 text-slate-800 overflow-hidden">
      <header className="p-3 bg-sky-700 text-white flex justify-between items-center shadow-md shrink-0"> {/* ... same header ... */ }
        <div className="flex items-center"> <button onClick={() => setIsLeftSidebarOpen(!isLeftSidebarOpen)} className="mr-2 p-1.5 hover:bg-sky-600 rounded-md"> {isLeftSidebarOpen ? <ChevronsLeft size={20}/> : <ChevronsRight size={20}/>} </button> <MessageCircleQuestion size={26} className="mr-2 transform -scale-x-100" /> <h1 className="text-lg font-bold">ASAVE Suite</h1> {currentSessionId && <span className="ml-3 text-xs px-2 py-0.5 bg-sky-500 rounded-full">Session: {currentSessionId}</span>} </div>
        <div className="flex items-center"> {currentPageView === 'fas_editor_page' && ( <button onClick={() => setCurrentPageView('chat')} className="mr-3 text-xs px-2.5 py-1 bg-sky-500 hover:bg-sky-400 rounded-md flex items-center"> <ChevronsLeft size={14} className="mr-1"/> Chat </button> )} <button onClick={() => { if ((currentSseMessageId || isFasSuggestionsLoading) && sseControllerRef.current) { sseControllerRef.current.abort(); setIsFasSuggestionsLoading(false); } else { addMessage('system', "No active AI task to cancel."); } }} disabled={!currentSseMessageId && !isFasSuggestionsLoading} className="text-xs px-2.5 py-1 bg-orange-500 hover:bg-orange-600 rounded-md shadow-sm disabled:opacity-50"> Cancel AI </button> <button onClick={() => setIsRightSidebarOpen(!isRightSidebarOpen)} className="ml-2 p-1.5 hover:bg-sky-600 rounded-md"> {isRightSidebarOpen ? <ChevronsRight size={20}/> : <ChevronsLeft size={20}/>} </button> </div>
      </header>

      <div className="flex flex-row flex-grow min-h-0">
        <LeftSidebar isOpen={isLeftSidebarOpen} sessions={availableSessions} currentSessionId={currentSessionId} onLoadSession={handleLoadSession} onCreateNewSession={handleCreateNewSessionFromSidebar} onRefreshSessions={fetchSessionsInternal} />
        <main className="flex-grow flex flex-col bg-slate-200/50 overflow-hidden">
            {currentPageView === 'chat' && (
                 <>
                    <div ref={chatContainerRef} className="flex-grow p-3 space-y-3 overflow-y-auto scrollbar-thin">
                        {chatMessages.map((msg) => ( /* ... same chat message rendering ... */ 
                        <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}> <div className={`max-w-[85%] p-2.5 rounded-xl shadow-sm text-sm ${ msg.sender === 'user' ? 'bg-sky-500 text-white rounded-br-none' : msg.sender === 'ai' ? 'bg-white text-slate-700 rounded-bl-none border border-slate-200' : 'bg-slate-100 text-slate-600 rounded-bl-none border border-slate-200' }`}> <div className="flex items-center mb-1 text-xs opacity-70"> {msg.sender === 'user' ? <User size={12} className="mr-1" /> : msg.sender === 'ai' ? <Bot size={12} className="mr-1" /> : <Settings size={12} className="mr-1" />} <span>{msg.sender.toUpperCase()}</span><span className="mx-1.5 text-[9px]">●</span><span>{msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span> </div> {msg.text && <p className="whitespace-pre-wrap leading-relaxed">{msg.text}</p>} {msg.component && <div className="mt-1">{msg.component}</div>} {msg.isLoading && <Loader2 size={16} className="animate-spin my-1 text-sky-500" />} </div> </div>
                        ))}
                        {/* Render Contract Suggestions in Chat AFTER the main SSE message if any */}
                        {contractSuggestionsForChat.length > 0 && (
                            <div className="my-2 p-2 bg-slate-100 rounded-md border">
                                <p className="text-xs font-medium text-slate-600 mb-1">Contract AI Suggestions ({contractSuggestionsForChat.length}):</p>
                                <div className="space-y-2 max-h-96 overflow-y-auto scrollbar-thin pr-1">
                                {contractSuggestionsForChat.map((sugg, index) => (
                                    <SuggestionCard
                                        key={`${sugg.source_agent_name}-${sugg.clause_id}-${index}`}
                                        suggestionPackage={sugg}
                                        onAccept={() => { navigator.clipboard.writeText(sugg.suggestion_details.proposed_text); addMessage('system', `Copied suggestion for clause ${sugg.clause_id}.`);}}
                                        onReject={() => { addMessage('system', `Rejected suggestion for clause ${sugg.clause_id}.`); setContractSuggestionsForChat(prev => prev.filter((_, i) => i !== index))}}
                                        isHighlighted={highlightedContractSuggestionId === `${sugg.source_agent_name}-${sugg.clause_id}-${index}`}
                                    />
                                ))}
                                </div>
                            </div>
                        )}
                    </div>
                    <footer className="p-2.5 border-t border-slate-300 bg-slate-50 shrink-0"> <div className="flex items-center space-x-2"> <input type="text" value={userInput} onChange={(e) => setUserInput(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleUserChatInput()} placeholder="Type your command or message..." className="flex-grow input-field py-2 px-3 text-sm"/> <button onClick={handleUserChatInput} className="btn-primary py-2 px-3.5"><Send size={18} /></button> </div> </footer>
                </>
            )}
            {currentPageView === 'fas_editor_page' && ( <FasEditorPage initialContent={fasEditorInitialContent} documentId={fasEditorDocumentId} sessionId={currentSessionId} onGetAIAssistance={handleGetAIAssistanceForFASFromEditor} onSaveRequest={onFasDocumentSaveFromEditor} suggestionToApply={suggestionToApplyToEditor} onSuggestionHandled={handleFasSuggestionAppliedOrDismissedInEditor} onNotify={sendSystemNotification} /> )}
        </main>
        <RightSidebar isOpen={isRightSidebarOpen} isSystemInitialized={isSystemInitialized} isLoadingFas={isExtractingText} isLoadingContract={isProcessingContract} onSetupSystem={() => setActiveModal('init_system')} onLoadFas={(file) => { if (file) handleFasFileForEditor(file);}} onClauseContract={() => { setContractHelperMode('clause_by_clause'); setActiveModal('contract_clause_input'); }} onFullContract={() => { setContractHelperMode('full_contract'); setActiveModal('contract_full_input'); }} onLoadSampleContract={() => { /* ... */ }} isEditorViewActive={currentPageView === 'fas_editor_page'} fasEditorSuggestions={fasEditorSuggestions} isFasSuggestionsLoading={isFasSuggestionsLoading} onAcceptFasEditorSuggestion={handleAcceptFasEditorSuggestion} onRejectFasEditorSuggestion={handleRejectFasEditorSuggestion} minConfidenceForHighlight={minConfidenceForHighlight} onSetMinConfidenceForHighlight={setMinConfidenceForHighlight} onProcessContextualUpdate={() => { setActiveModal('contextual_update_input'); setContextualUpdateTextModal(''); if(knownFasDocumentIds.length > 0) setTargetFasForUpdateModal(knownFasDocumentIds[0]); else setTargetFasForUpdateModal(''); }} />
      </div>

      {/* Modals */}
      {activeModal === 'init_system' && ( <Modal title="System Setup & Session Management" onClose={() => setActiveModal(null)}> <div className="space-y-3 text-sm"> {/* ... Init Modal Content from previous version, using *Modal state variables ... */} <div><label>Load Existing Session:</label><select value={selectedSessionToLoadModal} onChange={(e)=>{setSelectedSessionToLoadModal(e.target.value); if(e.target.value) setNewSessionNameModal('');}} className="input-field text-xs"> <option value="">-- Select Session --</option> {availableSessions.map(s=><option key={s.session_id} value={s.session_id}>{s.session_id}</option>)}</select></div> <hr/> <div><label>Or, Create New Session Name:</label><input type="text" value={newSessionNameModal} onChange={(e)=>{setNewSessionNameModal(e.target.value); if(e.target.value) setSelectedSessionToLoadModal('');}} className="input-field text-xs" disabled={!!selectedSessionToLoadModal}/>{newSessionNameModal && <label><input type="checkbox" checked={overwriteSessionModal} onChange={e=>setOverwriteSessionModal(e.target.checked)}/>Overwrite</label>}</div> <hr/> <FileUploader label="FAS PDF(s)" onFilesUploaded={setFasFilesForInitModal} id="m-fas" multiple accept=".pdf"/> <FileUploader label="SS PDF(s)" onFilesUploaded={setSsFilesForInitModal} id="m-ss" multiple accept=".pdf"/> <FileUploader label="Rules JSON" onFilesUploaded={f=>setRulesFileForInitModal(f as File)} id="m-rules" accept=".json"/> {/* Library selectors can be added here too */} <button onClick={handleInitializeBackend} className="btn-primary w-full mt-2"> {isLoading ? <Loader2 className="inline animate-spin"/> : '🚀'} Apply Configuration</button> </div> </Modal> )}
      {activeModal === 'contract_clause_input' && ( /* ... same ... */ <Modal title="Contract Suite: Clause-by-Clause" onClose={() => setActiveModal(null)}> <div className="space-y-3 text-sm"> <div><label>Contract Type:</label><select value={contractType} onChange={e=>setContractType(e.target.value)} className="input-field"><option>Salam</option><option>Mudarabah</option></select></div> <div><label>Clauses (one/line):</label><textarea value={clientClausesInput} onChange={e=>setClientClausesInput(e.target.value)} rows={8} className="input-field font-mono text-xs" /></div> <div><label>Context:</label><textarea value={overallContractCtx} onChange={e=>setOverallContractCtx(e.target.value)} rows={2} className="input-field" /></div> <button onClick={handleValidateContractTerms} className="w-full btn-teal">Validate</button> </div> </Modal> )}
      {activeModal === 'contract_full_input' && ( /* ... same ... */ <Modal title="Contract Suite: Full Contract" onClose={() => setActiveModal(null)}> <div className="space-y-3 text-sm"> <div><label>Contract Type:</label><select value={contractType} onChange={e=>setContractType(e.target.value)} className="input-field"><option>Salam</option><option>Mudarabah</option></select></div> <div><label>Full Text:</label><textarea value={fullContractTextInput} onChange={e=>setFullContractTextInput(e.target.value)} rows={10} className="input-field font-mono text-xs" /></div> <div><label>Context:</label><textarea value={overallContractCtx} onChange={e=>setOverallContractCtx(e.target.value)} rows={2} className="input-field" /></div> <button onClick={handleValidateContractTerms} className="w-full btn-teal">Review</button> </div> </Modal> )}
      {activeModal === 'contextual_update_input' && (
        <Modal title="Contextual Update Analysis" onClose={() => setActiveModal(null)}>
            <div className="space-y-3 text-sm">
                <div>
                    <label htmlFor="cua-text" className="block font-medium text-slate-700">New Contextual Information (News, Guideline, etc.):</label>
                    <textarea id="cua-text" value={contextualUpdateTextModal} onChange={(e) => setContextualUpdateTextModal(e.target.value)} rows={6} className="input-field" placeholder="Paste the new text here..."/>
                </div>
                <div>
                    <label htmlFor="cua-target-fas" className="block font-medium text-slate-700">Target FAS Document ID:</label>
                    {knownFasDocumentIds.length > 0 ? (
                        <select id="cua-target-fas" value={targetFasForUpdateModal} onChange={(e) => setTargetFasForUpdateModal(e.target.value)} className="input-field">
                            <option value="">-- Select Target FAS --</option>
                            {knownFasDocumentIds.map(docId => <option key={docId} value={docId}>{docId}</option>)}
                        </select>
                    ) : (
                        <input type="text" id="cua-target-fas" value={targetFasForUpdateModal} onChange={(e) => setTargetFasForUpdateModal(e.target.value)} className="input-field" placeholder="e.g., FAS-17.pdf (Load one first if list empty)"/>
                    )}
                </div>
                <button onClick={handleProcessContextualUpdate} disabled={isLoading} className="w-full btn-indigo">
                    {isLoading ? <Loader2 className="inline mr-2 h-5 w-5 animate-spin"/> : <Search size={16} className="mr-1.5"/>} Analyze Impact
                </button>
            </div>
        </Modal>
      )}
    </div>
  );
};

// --- Sidebar & Page Components ---
interface LeftSidebarProps { /* ... same ... */ isOpen: boolean; sessions: SessionInfo[]; currentSessionId: string | null; onLoadSession: (sessionId: string) => void; onCreateNewSession: () => void; onRefreshSessions: () => void; }
const LeftSidebar: React.FC<LeftSidebarProps> = ({ isOpen, sessions, currentSessionId, onLoadSession, onCreateNewSession, onRefreshSessions }) => { /* ... same ... */ if (!isOpen) return null; return ( <aside className="w-64 bg-slate-50 border-r border-slate-300 p-3 flex flex-col shrink-0 text-sm space-y-3 scrollbar-thin overflow-y-auto"> <div className="flex justify-between items-center"> <h2 className="font-semibold text-slate-700 flex items-center"><Database size={16} className="mr-1.5 text-sky-600"/>Sessions</h2> <button onClick={onRefreshSessions} className="text-xs p-1 hover:bg-slate-200 rounded-md text-slate-500">Refresh</button> </div> <button onClick={onCreateNewSession} className="w-full btn-secondary-small flex items-center justify-center py-1.5 text-xs"> <PlusCircle size={14} className="mr-1.5"/> Create/Initialize New </button> {sessions.length > 0 ? ( <ul className="space-y-1.5 text-xs"> {sessions.map(s => ( <li key={s.session_id}> <button onClick={() => onLoadSession(s.session_id)} className={`w-full text-left p-1.5 rounded hover:bg-sky-100 ${s.session_id === currentSessionId ? 'bg-sky-100 border border-sky-500 font-medium text-sky-700' : 'border border-transparent'}`} title={`FAS: ${s.has_fas_db?'Yes':'No'}, SS: ${s.has_ss_db?'Yes':'No'}\nModified: ${s.last_modified}`}> <FolderOpenDot size={12} className="inline mr-1 opacity-70"/> {s.session_id} </button> </li> ))} </ul> ) : <p className="text-xs text-slate-500 italic">No saved sessions found.</p>} </aside> ); };

interface RightSidebarProps { /* ... updated props ... */
  isOpen: boolean; isSystemInitialized: boolean; isLoadingFas: boolean; isLoadingContract: boolean;
  onSetupSystem: () => void; onLoadFas: (file: File | null) => void; onClauseContract: () => void; onFullContract: () => void; onLoadSampleContract: () => void;
  isEditorViewActive: boolean; fasEditorSuggestions: ValidatedSuggestionPackage[]; isFasSuggestionsLoading: boolean;
  onAcceptFasEditorSuggestion: (suggestion: ValidatedSuggestionPackage) => void;
  onRejectFasEditorSuggestion: (suggestion: ValidatedSuggestionPackage) => void;
  minConfidenceForHighlight: number; onSetMinConfidenceForHighlight: (value: number) => void;
  onProcessContextualUpdate: () => void;
}
const RightSidebar: React.FC<RightSidebarProps> = ({ /* ... destructured props ... */
  isOpen, isSystemInitialized, isLoadingFas, isLoadingContract, onSetupSystem, onLoadFas, onClauseContract, onFullContract, onLoadSampleContract,
  isEditorViewActive, fasEditorSuggestions, isFasSuggestionsLoading, onAcceptFasEditorSuggestion, onRejectFasEditorSuggestion,
  minConfidenceForHighlight, onSetMinConfidenceForHighlight, onProcessContextualUpdate
}) => { /* ... same structure, but with new section for confidence threshold and contextual update ... */
  if (!isOpen) return null;
  const actionButtonClass = "w-full flex items-center text-sm p-2.5 rounded-md hover:bg-slate-200 transition-colors text-slate-700";
  const disabledClass = "opacity-50 cursor-not-allowed";

  const highlightedFasSuggestionId = useMemo(() => {
    if (!isEditorViewActive || !fasEditorSuggestions.length) return null;
    let highestConfidence = -1;
    let bestSuggestion: ValidatedSuggestionPackage | null = null;
    fasEditorSuggestions.forEach(sugg => {
        const score = sugg.suggestion_details.confidence_score ?? 0;
        if (score >= minConfidenceForHighlight && score > highestConfidence) {
            highestConfidence = score;
            bestSuggestion = sugg;
        }
    });
    // Create a stable ID for the best suggestion, e.g., based on its proposed text or a unique part
    return bestSuggestion ? `${bestSuggestion.source_agent_name}-${bestSuggestion.suggestion_details.proposed_text.slice(0,20)}` : null;
  }, [fasEditorSuggestions, minConfidenceForHighlight, isEditorViewActive]);


  return ( <aside className="w-72 bg-slate-50 border-l border-slate-300 p-3 flex flex-col shrink-0 space-y-2 scrollbar-thin overflow-y-auto"> <h2 className="font-semibold text-slate-700 mb-2 flex items-center text-sm"><Settings size={16} className="mr-1.5 text-sky-600"/>Controls</h2> <button onClick={onSetupSystem} className={`${actionButtonClass} bg-sky-50 hover:bg-sky-100`}> <SlidersHorizontal size={18} className="mr-2 text-sky-600"/> System Setup / Sessions </button> <hr/> <p className="text-xs font-medium text-slate-500 mt-1">FAS Document Suite</p> <FileUploader label="" accept=".pdf" onFilesUploaded={(files) => onLoadFas(files as File)} id="sidebar-fas-loader"> <div className={`${actionButtonClass} ${(!isSystemInitialized || isLoadingFas) && disabledClass} group`}> {isLoadingFas ? <Loader2 size={18} className="mr-2 animate-spin text-sky-600"/> : <BookOpen size={18} className="mr-2 text-sky-600"/>} Load FAS PDF for Editor </div> </FileUploader>
      {isEditorViewActive && (
        <div className="mt-1 p-1.5 border-t border-slate-200">
            <div className="flex justify-between items-center mb-1">
                <p className="text-xs font-medium text-slate-500 flex items-center"> <BrainCircuit size={14} className="mr-1 text-purple-600"/> Editor AI Suggestions </p>
                <div className="flex items-center text-xs"> <label htmlFor="confidenceThreshold" className="mr-1 text-slate-500">Min:</label> <input type="number" id="confidenceThreshold" value={minConfidenceForHighlight} onChange={e => onSetMinConfidenceForHighlight(parseInt(e.target.value,10) || 0)} min="0" max="100" step="5" className="w-12 input-field px-1 py-0 text-[11px] text-center"/> <span className="ml-0.5">%</span> </div>
            </div>
            {isFasSuggestionsLoading && <div className="flex justify-center py-2"><Loader2 size={20} className="animate-spin text-purple-500"/></div>}
            {!isFasSuggestionsLoading && fasEditorSuggestions.length === 0 && <p className="text-xs text-slate-400 italic">No suggestions yet.</p>}
            {fasEditorSuggestions.length > 0 && ( <div className="space-y-1.5 max-h-[calc(100vh-550px)] overflow-y-auto scrollbar-thin pr-0.5"> {fasEditorSuggestions.map((sugg, idx) => ( <SuggestionCard key={`${sugg.source_agent_name}-${idx}-${sugg.suggestion_details.proposed_text.slice(0,10)}`} suggestionPackage={sugg} onAccept={() => onAcceptFasEditorSuggestion(sugg)} onReject={() => onRejectFasEditorSuggestion(sugg)} isHighlighted={highlightedFasSuggestionId === `${sugg.source_agent_name}-${sugg.suggestion_details.proposed_text.slice(0,20)}`} /> ))} </div> )}
        </div>
      )}
      <hr className={`${isEditorViewActive ? 'mt-2' : ''}`}/>
      <p className="text-xs font-medium text-slate-500 mt-1">Contextual Analysis</p>
      <button onClick={onProcessContextualUpdate} className={`${actionButtonClass} ${!isSystemInitialized && disabledClass}`}> <Lightbulb size={18} className="mr-2 text-indigo-600"/> Process Contextual Update </button>
      <hr/>
      <p className="text-xs font-medium text-slate-500 mt-1">Shari'ah Contract Suite</p>
      <button onClick={onClauseContract} className={`${actionButtonClass} ${(!isSystemInitialized || isLoadingContract) && disabledClass}`}> <ListChecks size={18} className="mr-2 text-teal-600"/> Clause-by-Clause Review </button> <button onClick={onFullContract} className={`${actionButtonClass} ${(!isSystemInitialized || isLoadingContract) && disabledClass}`}> <FileSearch2 size={18} className="mr-2 text-teal-600"/> Full Contract Review </button> <button onClick={onLoadSampleContract} className={`${actionButtonClass} border border-dashed border-slate-300 hover:border-teal-400`}> <FileSignature size={18} className="mr-2 text-teal-500"/> Load Sample Contract </button> {isLoadingContract && <div className="text-xs text-teal-600 flex items-center justify-center p-1"><Loader2 size={14} className="animate-spin mr-1"/>Contract AI Processing...</div>} </aside> );
};

interface FasEditorPageProps { /* ... same + onNotify ... */ 
  initialContent: string; documentId: string; sessionId: string | null; 
  onGetAIAssistance: (selectedText: string, documentId: string, currentMarkdown: string) => void; 
  onSaveRequest: (documentId: string, newContent: string, summary: string) => void; 
  suggestionToApply: ValidatedSuggestionPackage | null; 
  onSuggestionHandled: () => void; 
  onNotify: (message: string, type?: 'info' | 'error' | 'success') => void;
}
const FasEditorPage: React.FC<FasEditorPageProps> = ({ /* ... same + onNotify ... */ 
    initialContent, documentId, sessionId, onGetAIAssistance, onSaveRequest, suggestionToApply, onSuggestionHandled, onNotify
}) => { /* ... same implementation, but uses onNotify instead of alert ... */ 
  const [markdownContent, setMarkdownContent] = useState<string>(initialContent); const [selectedEditorText, setSelectedEditorText] = useState<string>(''); const editorRef = useRef<HTMLTextAreaElement>(null); const [viewMode, setViewMode] = useState<'edit' | 'preview'>('edit'); const [versions, setVersions] = useState<any[]>([]); const [showVersionsModal, setShowVersionsModal] = useState(false);
  useEffect(() => { setMarkdownContent(initialContent); }, [initialContent]);
  useEffect(() => { const editor = editorRef.current; if (viewMode === 'edit' && editor) { const updateSelection = () => { const selected = editor.value.substring(editor.selectionStart, editor.selectionEnd); if (selected.trim()) setSelectedEditorText(selected.trim()); else setSelectedEditorText(''); }; editor.addEventListener('select', updateSelection); editor.addEventListener('keyup', updateSelection); editor.addEventListener('mouseup', updateSelection); return () => { editor.removeEventListener('select', updateSelection); editor.removeEventListener('keyup', updateSelection); editor.removeEventListener('mouseup', updateSelection); }; } else { setSelectedEditorText(''); } }, [viewMode, markdownContent]);
  useEffect(() => { if (suggestionToApply && suggestionToApply.suggestion_details.proposed_text) { const original = suggestionToApply.suggestion_details.original_text || selectedEditorText; const proposed = suggestionToApply.suggestion_details.proposed_text; const currentEditorValue = editorRef.current?.value || markdownContent; const startIndex = currentEditorValue.indexOf(original); if (startIndex !== -1) { const newContent = currentEditorValue.substring(0, startIndex) + proposed + currentEditorValue.substring(startIndex + original.length); setMarkdownContent(newContent); if (editorRef.current) { const newCursorPos = startIndex + proposed.length; setTimeout(() => { editorRef.current?.focus(); editorRef.current?.setSelectionRange(newCursorPos, newCursorPos); }, 0); } setSelectedEditorText(proposed); } else { navigator.clipboard.writeText(proposed); onNotify("Original text snippet not found in editor. Proposed text copied.", "info"); } onSuggestionHandled(); } }, [suggestionToApply, onSuggestionHandled, selectedEditorText, markdownContent, onNotify]);
  const handleAIAssistClick = () => { if (selectedEditorText) onGetAIAssistance(selectedEditorText, documentId, markdownContent); else onNotify("Please select text in the editor first.", "info"); };
  const handleSaveCurrentVersion = async () => { if (!sessionId || !documentId) { onNotify("Session or document ID missing, cannot save.", "error"); return; } const summary = `Saved: ${new Date().toLocaleTimeString()}`; try { const response = await axios.post(`${API_BASE_URL}/document/${sessionId}/${documentId}/save_version`, { markdown_content: markdownContent, change_summary: summary }); if (response.data.status === 'success') { onNotify(`Version ${response.data.version_id} saved!`, "success"); fetchVersions(); } else { onNotify(`Failed to save version: ${response.data.message}`, "error"); } onSaveRequest(documentId, markdownContent, summary); } catch (error: any) { onNotify(`Error saving version: ${error.response?.data?.message || error.message}`, "error"); } };
  const fetchVersions = async () => { if (!sessionId || !documentId) return; try { const response = await axios.get(`${API_BASE_URL}/document/${sessionId}/${documentId}/versions`); if (response.data.status === 'success') setVersions(response.data.versions); else onNotify(`Failed to fetch versions: ${response.data.message}`, "error"); } catch (error: any) { onNotify(`Error fetching versions: ${(error as Error).message}`, "error"); } };
  const handleRevertToVersion = async (versionId: string) => { if (!sessionId || !documentId) { onNotify("Cannot revert: Session/Doc ID missing.", "error"); return; } try { const response = await axios.post(`${API_BASE_URL}/document/${sessionId}/${documentId}/revert_to_version`, { version_id_to_revert_to: versionId }); if (response.data.status === 'success') { setMarkdownContent(response.data.reverted_markdown_content); onNotify(`Reverted to version ${versionId}.`, "success"); fetchVersions(); setShowVersionsModal(false); } else { onNotify(`Failed to revert: ${response.data.message}`, "error"); } } catch (error: any) { onNotify(`Error reverting: ${error.response?.data?.message || error.message}`, "error"); } };
  useEffect(() => { if(sessionId && documentId) fetchVersions(); }, [sessionId, documentId]);
  return ( /* ... same FasEditorPage JSX ... */ <div className="p-4 h-full flex flex-col bg-white overflow-hidden"> <h2 className="text-lg font-semibold text-slate-700 mb-2 shrink-0">FAS Editor: <span className="font-mono text-sky-600">{documentId}</span></h2> <div className="mb-2 space-x-2 shrink-0"> <button onClick={() => setViewMode('edit')} className={`btn-toggle ${viewMode === 'edit' ? 'btn-toggle-active' : ''}`}><Edit size={14}/> Edit</button> <button onClick={() => setViewMode('preview')} className={`btn-toggle ${viewMode === 'preview' ? 'btn-toggle-active' : ''}`}><Eye size={14}/> Preview</button> <button onClick={handleSaveCurrentVersion} className="btn-secondary-small"><Save size={14}/> Save Version</button> <button onClick={() => {fetchVersions(); setShowVersionsModal(true);}} className="btn-secondary-small"><History size={14}/> Versions ({versions.length})</button> <button onClick={handleAIAssistClick} className="btn-primary-small" disabled={!selectedEditorText}><MessageSquare size={14}/> Get AI Help</button> </div> {selectedEditorText && viewMode === 'edit' && ( <div className="p-1.5 my-1 bg-sky-50 border border-sky-200 rounded-md text-xs shrink-0"> <p className="font-medium text-sky-700">Selected for AI:</p> <pre className="bg-white p-1 rounded max-h-16 overflow-y-auto text-[11px]"><code>{selectedEditorText}</code></pre> </div> )} <div className="flex-grow min-h-0"> {viewMode === 'edit' ? ( <textarea ref={editorRef} value={markdownContent} onChange={(e) => setMarkdownContent(e.target.value)} className="w-full h-full textarea-field text-sm font-mono resize-none"/> ) : ( <div className="w-full h-full markdown-preview p-2 border rounded bg-slate-50 text-sm overflow-y-auto scrollbar-thin"><ReactMarkdown remarkPlugins={[remarkGfm]}>{markdownContent || "No content."}</ReactMarkdown></div> )} </div> {showVersionsModal && ( <Modal title={`Versions for: ${documentId}`} onClose={() => setShowVersionsModal(false)}> {versions.length > 0 ? ( <ul className="space-y-1.5 text-xs max-h-80 overflow-y-auto"> {versions.map((v: any) => ( <li key={v.version_id} className="p-1.5 border rounded flex justify-between items-center hover:bg-slate-50"> <div> <p><strong>ID:</strong> {v.version_id}</p> <p className="text-[10px] text-slate-500">Saved: {new Date(v.timestamp).toLocaleString()}</p> <p className="text-[10px] italic">"{v.summary || "No summary"}"</p> </div> <button onClick={() => handleRevertToVersion(v.version_id)} className="btn-secondary-small text-[10px] px-1.5 py-0.5">Revert</button> </li> ))} </ul> ) : <p className="text-xs text-slate-500">No versions found.</p>} </Modal> )} </div> );
};

interface ModalProps { /* ... same ... */ title: string; onClose: () => void; children: React.ReactNode; size?: 'normal' | 'large' | 'xlarge'; }
const Modal: React.FC<ModalProps> = ({ title, onClose, children, size = 'normal' }) => { /* ... same Modal code ... */  let modalWidthClass = 'max-w-lg'; if (size === 'large') modalWidthClass = 'max-w-3xl'; if (size === 'xlarge') modalWidthClass = 'max-w-6xl'; return ( <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex justify-center items-center z-50 p-4"> <div className={`bg-white rounded-lg shadow-xl w-full ${modalWidthClass} max-h-[90vh] flex flex-col`}> <div className="flex justify-between items-center p-3 border-b border-slate-200"> <h3 className="text-md font-semibold text-slate-700">{title}</h3> <button onClick={onClose} className="text-slate-400 hover:text-slate-600 p-1 rounded-full hover:bg-slate-100"> <X size={20} /> </button> </div> <div className="p-3 overflow-y-auto scrollbar-thin"> {children} </div> </div> </div> );};
const renderLibraryItemCheckbox = ( item: LibraryPdfItem, selectedArray: string[], setSelectedArray: React.Dispatch<React.SetStateAction<string[]>>, prefix: 'fas' | 'ss' ) => { /* ... same ... */ if (item.type === 'file') { return ( <div key={`${prefix}-${item.name}`} className="flex items-center"> <input type="checkbox" id={`${prefix}-lib-${item.name}`} value={item.name} checked={selectedArray.includes(item.name)} onChange={(e) => { const name = e.target.value; setSelectedArray(prev => e.target.checked ? [...prev, name] : prev.filter(n => n !== name)); }} className="mr-1 focus:ring-sky-500 h-3 w-3"/> <label htmlFor={`${prefix}-lib-${item.name}`} className="truncate">{item.name}</label> </div> ); } else if (item.type === 'directory' && item.files) { return ( <div key={`${prefix}-dir-${item.name}`} className="ml-0.5 mt-0.5"> <p className="text-[10px] font-medium text-slate-500">{item.name}/</p> <div className="pl-1.5 border-l border-slate-200"> {item.files.map(f => ( <div key={`${prefix}-lib-${item.name}-${f}`} className="flex items-center"> <input type="checkbox" id={`${prefix}-lib-${item.name}-${f}`} value={`${item.name}/${f}`} checked={selectedArray.includes(`${item.name}/${f}`)} onChange={(e) => { const path = e.target.value; setSelectedArray(prev => e.target.checked ? [...prev, path] : prev.filter(n => n !== path)); }} className="mr-1 focus:ring-sky-500 h-3 w-3"/> <label htmlFor={`${prefix}-lib-${item.name}-${f}`} className="truncate">{f}</label> </div> ))} </div> </div> ); } return null;};

export default App;


--- FILE : index.css ---


@import "tailwindcss";

/* Global focus style for accessibility */
*:focus-visible {
  outline: none;
  box-shadow: 0 0 0 2px #0ea5e9, 0 0 0 4px rgba(255, 255, 255, 0.8);
  border-radius: 0.25rem;
  transition: box-shadow 0.2s ease-in-out;
}
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.animate-slide-in-right {
  animation: slideInRight 0.4s ease-out;
}

/* Custom scrollbar styles */
.scrollbar-thin {
  scrollbar-width: thin;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 0.375rem;
  height: 0.375rem;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background-color: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background-color: #cbd5e1;
  border-radius: 9999px;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background-color: #94a3b8;
}
.scrollbar-thin::-webkit-scrollbar-thumb:active {
  background-color: #64748b;
}

/* Button styling */
.btn-primary {
  @apply py-2 px-4 bg-gradient-to-r from-sky-600 to-sky-500 hover:from-sky-700 hover:to-sky-600 text-white font-medium rounded-md shadow-sm disabled:bg-slate-400 disabled:from-slate-400 disabled:to-slate-400 transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0 disabled:transform-none;
}

.btn-primary-small { 
  @apply py-1.5 px-3 bg-gradient-to-r from-sky-600 to-sky-500 hover:from-sky-700 hover:to-sky-600 text-white text-sm font-medium rounded shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0;
}

.btn-secondary-small { 
  @apply py-1.5 px-3 bg-white border border-slate-300 hover:bg-slate-100 text-slate-700 text-sm font-medium rounded shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200;
}

.btn-teal { 
  @apply py-2 px-4 bg-gradient-to-r from-teal-600 to-teal-500 hover:from-teal-700 hover:to-teal-600 text-white font-medium rounded-md shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0 disabled:transform-none;
}

.btn-toggle { 
  @apply py-1 px-3 bg-slate-100 hover:bg-slate-200 text-slate-700 text-sm font-medium rounded-md border border-slate-300 transition-colors duration-200;
}

.btn-toggle-active { 
  @apply py-1 px-3 bg-sky-600 text-white text-sm font-medium rounded-md border border-sky-600 shadow-inner;
}

.input-field { 
  @apply mt-1 block w-full p-2 border border-slate-300 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 sm:text-sm;
}


--- FILE : main.tsx ---


// src/main.tsx (Recommended placement)
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);


--- FILE : my_project_context.txt ---


Here is a coding project I am working on.
It starts with the full structure of the project, then you will have each file title and file content.

Respond with 'OK' and for now, just understand the project completely.
I will ask for help in the next prompt so you can assist me with this project.



--- PROJECT STRUCTURE ---


{
    "/": {
        "App.css": {},
        "App.tsx": {},
        "index.css": {},
        "main.tsx": {},
        "vite-env.d.ts": {},
        "react.svg": {},
        "FileUploader.tsx": {},
        "Sidebar.tsx": {},
        "SuggestionCard.tsx": {},
        "api.ts": {}
    }
}


--- FILE : App.css ---


#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



--- FILE : App.tsx ---


/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// src/App.tsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import FileUploader from './components/FileUploader';
import Sidebar from './components/Sidebar';
import SuggestionCard from './components/SuggestionCard';
import {
    initializeSystem,
    getAssistanceStreamUrl, // For FAS document editor
    getApiStatus,
    type InitResponse,
    type SSEEventData,
    type ValidatedSuggestionPackage
} from './services/api';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import {
    Upload, Settings, AlertTriangle, CheckCircle, Info, 
    MessageSquare, Edit3, Loader2, Scissors, Eye, Edit, ShieldCheck, ListChecks, FileSignature, FileSearch2} from 'lucide-react';

// --- Type Definitions ---
// (Keep MarkerApiResponse, FallbackExtractedPdfResponse, ClientClauseInput, 
//  ClauseValidationPayload, ClauseAiSuggestionPayload, ClauseSkippedPayload, 
//  ClauseAnalysisResult from previous full App.tsx versions)

interface FallbackExtractedPdfResponse {
    status: string;
    pages?: Array<{ page_number: number; content: string }>;
    message?: string;
    document_info?: any;
    [key: string]: any;
}

interface MarkerApiResponse {
    status: string;
    extracted_text?: string;
    message?: string;
    document_info?: any;
    [key: string]: any;
}

interface ClientClauseInput { // For the payload to the contract validation API
    clause_id: string;
    text: string;
}
interface ClauseValidationPayload { // Expected from SSE for validation of original clause
    clause_id: string;
    original_text: string;
    scva_report: any; 
}
interface ClauseAiSuggestionPayload extends ValidatedSuggestionPackage { // For AI's suggestion on a clause
    clause_id: string;
}
// interface ClauseSkippedPayload {
//     clause_id: string;
//     original_text: string;
//     reason: string;
// }

interface LibraryPdfItem {
  name: string;
  type: "file" | "directory"; // And potentially 'directory' if backend lists them
  path?: string; // For files within directories: "dirname/filename.pdf"
  files?: string[]; // For directories
}
interface SessionInfo {
  session_id: string;
  path: string;
  has_fas_db: boolean;
  has_ss_db: boolean;
  last_modified: string;
}


interface FullContractReviewReport {
    overall_assessment: string;
    contract_summary_by_ai: string;
    identified_clauses_with_issues: Array<{
        original_clause_text_snippet: string; // Snippet of the clause AI is referring to
        issue_or_concern: string;
        relevant_shariah_rule_ids?: string[]; // Optional
        recommended_action_or_modification: string; // AI's suggested fix/wording
        severity: "High - Clear Non-Compliance" | "Medium - Potential Risk/Ambiguity" | "Low - Suggestion for Enhancement" | "Information" | string; // Allow string for flexibility
    }>;
    general_recommendations?: string[]; // Optional
    overall_shariah_alignment_notes: string;
    error?: string;
}

// For storing results of contract analysis in frontend state
interface ClauseAnalysisResult {
  clause_id: string;
  original_text: string;
  validation_status?: string;
  validation_reason?: string;
  scva_report_original_clause?: any;
  ai_suggestions: ValidatedSuggestionPackage[];
  processing_message?: string;
  skipped?: boolean;
  skipped_reason?: string;
}


const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001';

// Sample Salam Contract for easy loading in Contract Helper
const sampleSalamContractForHelper = {
    contract_type: "Salam",
    client_clauses_text: // Multiline string for easier pasting into textarea
`Al Baraka Bank Algeria – Ouargla Branch, registered under RC 06B093, hereinafter referred to as “the Bank” or Rab al-Salam.
Al Nour Cooperative for Flour Production, located in Ghardaïa, represented by Mr. Amine Boukhatem, acting as purchasing manager, hereinafter referred to as “the Buyer” or Muslam Ilaihi.
Article 1 – Subject of the Contract
The Bank undertakes to deliver 100 quintals of durum wheat to the Buyer on a future date, in accordance with the Salam contract terms.
Article 2 – Payment
The Buyer shall pay 2,800,000 DZD (28,000 DZD per quintal) in full and immediately upon signature of the contract.
Payment is to be transferred to the Bank's designated Salam operations account.
Article 3 – Description of Goods (al-Muslam Fihi)
Commodity: Durum wheat
Variety: Certified “Boussalem”
Moisture: ≤ 12%
Impurities: ≤ 2%
Packaging: 100 kg sacks
Fungible commodity, defined by standard industrial specifications
Article 4 – Delivery
Delivery Date: July 15, 2025
Delivery Location: Warehouse of Al Nour Cooperative in Ghardaïa
The goods must fully comply with the specifications. Customary tolerances apply.
Article 5 – Provisions
No penalty for late delivery is allowed.
In case of inability to deliver on time, the Buyer may: Grant an extension; Or request a refund of the capital.`,
    overall_contract_context: "Initial Salam Credit Contract No. BCI-2025/Sal-102 for the delivery of 100 quintals of durum wheat by Al Baraka Bank Algeria to Al Nour Cooperative for Flour Production."
};


type AppView = 'fas_editor' | 'contract_suite';

const App: React.FC = () => {
  // --- App View State ---
  const [currentAppView, setCurrentAppView] = useState<AppView>('fas_editor');

  // --- Initialization State ---
  const [fasFilesForInit, setFasFilesForInit] = useState<FileList | null>(null);
  const [ssFilesForInit, setSsFilesForInit] = useState<FileList | null>(null);
  const [rulesFileForInit, setRulesFileForInit] = useState<File | null>(null);
  const [isSystemInitialized, setIsSystemInitialized] = useState<boolean>(false);
  
  // --- FAS Document Editor State ---
  const [fasFileForViewing, setFasFileForViewing] = useState<File | null>(null);
  const [currentMarkdownContent, setCurrentMarkdownContent] = useState<string>('');
  const [currentDocumentId, setCurrentDocumentId] = useState<string>('');
  const [selectedText, setSelectedText] = useState<string>('');
  const markdownEditorRef = useRef<HTMLTextAreaElement>(null);
  const markdownPreviewRef = useRef<HTMLDivElement>(null);
  const [fasEditorViewMode, setFasEditorViewMode] = useState<'preview' | 'edit'>('preview'); 

  // --- Contract Helper State ---
  const [contractHelperMode, setContractHelperMode] = useState<'full_contract' | 'clause_by_clause'>('clause_by_clause');
  const [contractType, setContractType] = useState<string>(sampleSalamContractForHelper.contract_type);
  const [clientClausesInput, setClientClausesInput] = useState<string>(sampleSalamContractForHelper.client_clauses_text);
  const [fullContractTextInput, setFullContractTextInput] = useState<string>(''); // For full contract review
  const [overallContractCtx, setOverallContractCtx] = useState<string>(sampleSalamContractForHelper.overall_contract_context);
  const [clauseAnalysisResults, setClauseAnalysisResults] = useState<ClauseAnalysisResult[]>([]);
  const [fullContractReviewReport, setFullContractReviewReport] = useState<FullContractReviewReport | null>(null);


  // --- API Interaction State ---
  const [progressLog, setProgressLog] = useState<SSEEventData[]>([]);
  const [finalSuggestionsForFAS, setFinalSuggestionsForFAS] = useState<ValidatedSuggestionPackage[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false); 
  const [isExtractingText, setIsExtractingText] = useState<boolean>(false);
  const [isProcessingContract, setIsProcessingContract] = useState<boolean>(false);
  const [apiMessage, setApiMessage] = useState<{type: 'info' | 'success' | 'error' | 'warning', text: string} | null>(null);
  const sseControllerRef = useRef<AbortController | null>(null);

  const [libraryPdfs, setLibraryPdfs] = useState<LibraryPdfItem[]>([]);
  const [selectedLibraryFas, setSelectedLibraryFas] = useState<string[]>([]); // Filenames
  const [selectedLibrarySs, setSelectedLibrarySs] = useState<string[]>([]);   // Filenames
  
  const [availableSessions, setAvailableSessions] = useState<SessionInfo[]>([]);
  const [selectedSessionToLoad, setSelectedSessionToLoad] = useState<string>('');
  const [newSessionName, setNewSessionName] = useState<string>('');
  const [overwriteSession, setOverwriteSession] = useState<boolean>(false);
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);


  // Check API status on initial load
  useEffect(() => { /* ... same as before ... */ 
    const checkInitialApiStatus = async () => {
      try {
        const statusData = await getApiStatus();
        if (statusData?.asave_initialized) setIsSystemInitialized(true);
        setApiMessage({type: 'info', text: statusData?.asave_initialized ? 'ASAVE backend initialized.' : 'ASAVE backend needs initialization for full context features.'});
      } catch (error) { setApiMessage({type: 'error', text: 'Could not connect to ASAVE API. Ensure backend is running.'}); }
    };
    checkInitialApiStatus();
  }, []);

  const handleInitializeBackend = async () => { /* ... same as before ... */ 
    if (!fasFilesForInit) { setApiMessage({type:'error', text:"Upload FAS PDFs."}); return; }
    setIsLoading(true); setApiMessage({type: 'info', text: 'Initializing backend...'});
    const formData = new FormData();
    Array.from(fasFilesForInit).forEach(f => formData.append('fas_files', f, f.name));
    if (ssFilesForInit) Array.from(ssFilesForInit).forEach(f => formData.append('ss_files', f, f.name));
    if (rulesFileForInit) formData.append('shariah_rules_explicit_file', rulesFileForInit, rulesFileForInit.name);
    try {
      const data = await initializeSystem(formData);
      setApiMessage({type: data.status === 'success' ? 'success' : 'error', text: `Backend Init: ${data.message}`});
      if (data.status === 'success') setIsSystemInitialized(true);
    } catch (e:any) { setApiMessage({type: 'error', text: `Backend Init Failed: ${e.message}`}); }
    setIsLoading(false);
  };

  const handleFasFileForProcessing = async (file: File | null) => { /* ... same as before (Marker + Fallback) ... */
    setFasFileForViewing(file);
    if (!file) { setCurrentMarkdownContent(''); setCurrentDocumentId(''); return; }
    setIsExtractingText(true);
    setApiMessage({type: 'info', text: `Processing ${file.name}...`});
    setCurrentMarkdownContent(''); setCurrentDocumentId(file.name); setSelectedText('');
    setFinalSuggestionsForFAS([]); setProgressLog([]);
    const formData = new FormData(); formData.append('pdf_file', file);
    try {
      let markdownText = ''; let docInfo: any = { filename: file.name };
      try {
        const markerResponse = await axios.post<MarkerApiResponse>(`${API_BASE_URL}/extract_text_from_pdf_file_marker`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
        if (markerResponse.data.status === 'success' && typeof markerResponse.data.extracted_text === 'string') {
          markdownText = markerResponse.data.extracted_text; docInfo = markerResponse.data.document_info || markerResponse.data;
          setApiMessage({type: 'success', text: `Extracted via Marker: ${docInfo.filename}`});
        } else { throw new Error(markerResponse.data.message || "Marker extraction failed"); }
      } catch (markerError) {
        setApiMessage({type: 'warning', text: `Marker failed: ${(markerError as Error).message}. Trying fallback...`});
        // ... (Fallback logic from previous App.tsx) ...
        const fallbackResponse = await axios.post<FallbackExtractedPdfResponse>(`${API_BASE_URL}/extract_text_from_pdf?reformat_ai=true`, formData, { headers: { 'Content-Type': 'multipart/form-data' }});
        if (fallbackResponse.data.status === 'success' && fallbackResponse.data.pages?.length) {
          markdownText = fallbackResponse.data.pages.map((p: { page_number: any; content: string; }) => `<!-- Page ${p.page_number} -->\n${p.content.trim()}`).join('\n\n<hr />\n\n');
          docInfo = fallbackResponse.data.document_info || docInfo;
          setApiMessage({type: 'success', text: `Fallback extraction: ${docInfo.filename}`});
        } else { throw new Error(fallbackResponse.data.message || "Fallback extraction failed"); }
      }
      setCurrentMarkdownContent(markdownText.trimStart()); setCurrentDocumentId(docInfo.filename);
    } catch (e: any) { setApiMessage({type: 'error', text: `PDF Processing Failed: ${e.message}`}); setCurrentMarkdownContent('');}
    setIsExtractingText(false);
  };

  // // --- Text Selection Logic (Combined for FAS Editor) ---
  // useEffect(() => { /* ... same as before ... */ 
  //   if (currentAppView !== 'fas_editor') return; // Only attach for FAS editor
  //   const editor = markdownEditorRef.current; const previewArea = markdownPreviewRef.current;
  //   let selectionHandler: (() => void) | null = null;
  //   const clearPreviousListeners = () => { /* ... */ }; clearPreviousListeners();
  //   if (fasEditorViewMode === 'edit' && editor) { /* ... */ }
  //   else if (fasEditorViewMode === 'preview' && previewArea) { /* ... */ }
  //   else { setSelectedText(''); }
  //   return clearPreviousListeners;
  // }, [currentAppView, fasEditorViewMode, currentMarkdownContent]); // Re-run if view or content changes

  useEffect(() => {
    const editor = markdownEditorRef.current;
    const previewArea = markdownPreviewRef.current;

    if (fasEditorViewMode === 'edit' && editor) {
      const updateSelectionFromTextarea = () => {
        const selected = editor.value.substring(editor.selectionStart, editor.selectionEnd);
        if(selected.trim()){ setSelectedText(selected.trim()); }
      };
      editor.addEventListener('select', updateSelectionFromTextarea);
      editor.addEventListener('keyup', updateSelectionFromTextarea);
      editor.addEventListener('mouseup', updateSelectionFromTextarea);
      // Add focus to re-check selection when editor gets focus
      editor.addEventListener('focus', updateSelectionFromTextarea); 
      return () => {
        editor.removeEventListener('select', updateSelectionFromTextarea);
        editor.removeEventListener('keyup', updateSelectionFromTextarea);
        editor.removeEventListener('mouseup', updateSelectionFromTextarea);
        editor.removeEventListener('focus', updateSelectionFromTextarea);
      };
    } else if (fasEditorViewMode === 'preview' && previewArea) {
      // For preview, rely on a global-like mouseup if selection is within the preview area
      const handlePreviewMouseUp = () => {
        const selection = window.getSelection();
        const selected = selection?.toString().trim();
        if (selected && selection?.anchorNode && previewArea.contains(selection.anchorNode)) {
            setSelectedText(selected);
        }
      };
      document.addEventListener('mouseup', handlePreviewMouseUp); // More general for rendered content
      return () => {
        document.removeEventListener('mouseup', handlePreviewMouseUp);
      };
    }
  }, [fasEditorViewMode]);


  const clearCurrentSelection = () => { /* ... same as before ... */ 
    setSelectedText(''); window.getSelection()?.empty();
    if (markdownEditorRef.current && fasEditorViewMode === 'edit') { /* ... */ }
  };

  // Generic SSE Handler - same as before
  const startSSEProcessing = useCallback(async ( /* params */ 
    url: string, 
    payload: any, 
    onEvent: (eventData: SSEEventData) => void, 
    onComplete: () => void, 
    onError: (error: Error) => void,
    onFinally?: () => void
  ) => {
    // ... (Full SSE logic from previous App.tsx, ensuring isLoading/isProcessingContract is handled in onFinally)
    setIsLoading(true); // This will be the general AI assistance spinner
    setProgressLog([{event_type: "system_log", message: "🚀 Requesting AI processing...", step_code: "STREAM_REQUEST_START"}]);
    if (sseControllerRef.current) sseControllerRef.current.abort();
    const controller = new AbortController();
    sseControllerRef.current = controller;
    try {
      const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload), signal: controller.signal });
      if (!response.ok) { const et = await response.text(); throw new Error(`API: ${response.status} - ${et}`);}
      if (!response.body) throw new Error("No response body.");
      const reader = response.body.getReader(); const decoder = new TextDecoder(); let sseBuffer = '';
      async function processStream() {
        while (true) {
          try {
            const { done, value } = await reader.read();
            if (controller.signal.aborted) { break; }
            if (done) { onComplete(); break; }
            sseBuffer += decoder.decode(value, { stream: true });
            const messages = sseBuffer.split('\n\n'); sseBuffer = messages.pop() || ''; 
            messages.forEach(message => {
              if (message.startsWith('data: ')) {
                try {
                  const eventData = JSON.parse(message.substring(6)) as SSEEventData;
                  setProgressLog(p => [...p, eventData]); onEvent(eventData);
                } catch (e) { console.warn("SSE JSON Parse Error:", e, "Raw:", message); }
              }
            });
          } catch (streamReadError: any) { onError(streamReadError); break; }
        }
      }
      await processStream();
    } catch (error: any) { onError(error); }
    finally { setIsLoading(false); if (onFinally) onFinally(); }
  }, []);

    const handleExportMarkdown = () => {
      if (!currentMarkdownContent) {
        setApiMessage({type: 'warning', text: "No Markdown content to export."});
        return;
      }
      const filename = currentDocumentId ? `${currentDocumentId.replace('.pdf', '') || 'document'}.md` : 'asave_export.md';
      const blob = new Blob([currentMarkdownContent], { type: 'text/markdown;charset=utf-8;' });
      const link = document.createElement("a");
      if (link.download !== undefined) { // feature detection
          const url = URL.createObjectURL(blob);
          link.setAttribute("href", url);
          link.setAttribute("download", filename);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
          setApiMessage({type: 'success', text: `Markdown file '${filename}' download initiated.`});
      } else {
          setApiMessage({type: 'error', text: "Markdown export not supported by your browser (link.download undefined)."});
      }
  };

  const handleGetAIAssistanceForFAS = () => { /* ... same as before, uses startSSEProcessing ... */ 
    if (!selectedText.trim()) { setApiMessage({type: 'error', text: "Please select text."}); return; }
    if (!isSystemInitialized && currentMarkdownContent) { setApiMessage({type: 'warning', text: "Backend KB not initialized."});}
    else if (!isSystemInitialized && !currentMarkdownContent) { setApiMessage({type: 'error', text: "Initialize backend & load FAS doc."}); return; }
    
    setFinalSuggestionsForFAS([]); // Clear previous FAS suggestions
    setApiMessage({type: 'info', text: 'AI (FAS Editor) is thinking... 🧠'});
    const payload = { selected_text_from_fas: selectedText, fas_document_id: currentDocumentId };
    startSSEProcessing(
      getAssistanceStreamUrl(), payload,
      (eventData) => {
        if (eventData.event_type === "validated_suggestion_package" && eventData.payload) {
          setFinalSuggestionsForFAS(prev => [...prev, eventData.payload as ValidatedSuggestionPackage]);
        }
        if (eventData.message && eventData.event_type === "progress") { setApiMessage({type: 'info', text: `AI (FAS): ${eventData.message}`}); }
        if (eventData.event_type === "fatal_error") { setApiMessage({type:'error', text: `Stream error: ${eventData.message}`}); sseControllerRef.current?.abort(); }
      },
      () => setApiMessage(prev => (prev?.text.includes('AI is thinking') || !prev) ? {type: 'success', text: 'AI FAS analysis complete!'} : prev),
      (error) => { if (error.name !== 'AbortError') setApiMessage({type: 'error', text: `AI FAS Assist Failed: ${error.message}`}); else setApiMessage({type: 'info', text: 'AI FAS assistance cancelled.'}); }
    );
  };

  const handleValidateContractTerms = () => {
    if (!isSystemInitialized) {
      setApiMessage({type: 'error', text: "Please initialize the backend system first (Section 1) before validating contracts."});
      return;
    }
    if (!clientClausesInput.trim() && !fullContractTextInput.trim()) {
        setApiMessage({type: 'error', text: contractHelperMode === 'clause_by_clause' ? "Please enter contract clauses." : "Please enter the full contract text."});
        return;
    }
    
    let clausesForApi: ClientClauseInput[] = [];
    let contractTextForApi = "";

    if (contractHelperMode === 'clause_by_clause') {
        clausesForApi = clientClausesInput.split('\n')
            .map((text, index) => ({ clause_id: `user_c${index + 1}`, text: text.trim() }))
            .filter(clause => clause.text.length > 0);
        if (!clausesForApi.length) {setApiMessage({type:'error', text:"No valid clauses parsed."}); return;}
    } else { // full_contract mode
        contractTextForApi = fullContractTextInput;
    }

    setClauseAnalysisResults([]);
    setFullContractReviewReport(null);
    setApiMessage({type: 'info', text: `AI is reviewing your ${contractHelperMode === 'clause_by_clause' ? 'clauses' : 'full contract'}... 🧠`});
    
    const endpoint = contractHelperMode === 'clause_by_clause' 
        ? `${API_BASE_URL}/validate_contract_terms_stream` 
        : `${API_BASE_URL}/review_full_contract_stream`;

    const payload = contractHelperMode === 'clause_by_clause'
        ? { contract_type: contractType, client_clauses: clausesForApi, overall_contract_context: overallContractCtx }
        : { full_contract_text: contractTextForApi, contract_type: contractType };

    startSSEProcessing(
      endpoint, payload,
      (eventData) => { // onEvent for contract validation
      console.log("SSE Event Data:", eventData);
        if (contractHelperMode === 'clause_by_clause') {
            if (eventData.event_type === "clause_validation_result" && eventData.payload) {
                const data = eventData.payload as ClauseValidationPayload;
                setClauseAnalysisResults(prev => { /* ... update or add logic ... */ 
                    const existing = prev.find(r => r.clause_id === data.clause_id);
                    if (existing) return prev.map(r => r.clause_id === data.clause_id ? {...r, scva_report_original_clause: data.scva_report, validation_status: data.scva_report?.overall_status, validation_reason: data.scva_report?.summary_explanation } : r);
                    return [...prev, { clause_id: data.clause_id, original_text: data.original_text, scva_report_original_clause: data.scva_report, validation_status: data.scva_report?.overall_status, validation_reason: data.scva_report?.summary_explanation, ai_suggestions: [] }];
                });
            } else if (eventData.event_type === "clause_ai_suggestion_generated" && eventData.payload) {
                const data = eventData.payload as ClauseAiSuggestionPayload;
                setClauseAnalysisResults(prev => prev.map(r => r.clause_id === data.clause_id ? { ...r, ai_suggestions: [...r.ai_suggestions, data] } : r));
            } else if (eventData.event_type === "clause_skipped" && eventData.payload) { /* ... */ }
        } else { // full_contract mode
            if (eventData.event_type === "full_contract_review_completed" && eventData.payload) {
                console.log("Full Contract Review Report:", eventData.payload);
                setFullContractReviewReport(eventData.payload as FullContractReviewReport);
                
            }
        }
        if (eventData.message && eventData.event_type === "progress") { setApiMessage({type: 'info', text: `AI (Contract): ${eventData.message}`});}
        if (eventData.event_type === "fatal_error") { /* ... */ }
      },
      () => setApiMessage(prev => (prev?.text.includes('AI is reviewing') || !prev) ? {type: 'success', text: 'Contract review complete!'} : prev),
      (error) => { if (error.name !== 'AbortError') setApiMessage({type: 'error', text: `Contract Review Failed: ${error.message}`}); else setApiMessage({type: 'info', text: 'Contract review cancelled.'}); },
      () => setIsProcessingContract(false) // onFinally
    );
  };
  
  const loadSampleContract = () => { /* ... same as before ... */ 
    setContractType(sampleSalamContractForHelper.contract_type);
    setClientClausesInput(sampleSalamContractForHelper.client_clauses_text);
    setOverallContractCtx(sampleSalamContractForHelper.overall_contract_context);
    setFullContractTextInput(sampleSalamContractForHelper.client_clauses_text); // Also load into full contract input
    setApiMessage({type: 'info', text: 'Sample Salam Contract loaded into fields.'});
  };

  const fetchLibraryPdfs = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/list_library_pdfs`);
      if (response.data.status === 'success') {
        setLibraryPdfs(response.data.pdf_files);
        setApiMessage({type: 'info', text: `Found ${response.data.pdf_files.length} items in PDF library.`});
      } else {
        setApiMessage({type: 'error', text: `Failed to list library PDFs: ${response.data.message}`});
      }
    } catch (error: any) {
      setApiMessage({type: 'error', text: `Error fetching library PDFs: ${error.message}`});
    }
  };

  const fetchSessions = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/list_sessions`);
      if (response.data.status === 'success') {
        setAvailableSessions(response.data.sessions);
      } else {
        setApiMessage({type: 'error', text: `Failed to list sessions: ${response.data.message}`});
      }
    } catch (error: any) {
      setApiMessage({type: 'error', text: `Error fetching sessions: ${error.message}`});
    }
  };

  // Call these on component mount or when needed
  useEffect(() => {
    fetchLibraryPdfs();
    fetchSessions();
  }, []);

  const handleInitializeModified = async () => {
    // This function now needs to decide whether to:
    // 1. Load an existing session.
    // 2. Create a new session with uploaded files and/or library files.
    // 3. Just use temporary uploaded files without saving a session explicitly.

    setIsLoading(true);
    setApiMessage({type: 'info', text: 'Processing initialization request...'});
    
    const formData = new FormData();

    if (selectedSessionToLoad) {
        formData.append('load_session_id', selectedSessionToLoad);
    } else {
        // If not loading, we might be saving a new session or using uploads/library files
        if (newSessionName.trim()) {
            formData.append('save_as_session_name', newSessionName.trim());
            if (overwriteSession) {
                formData.append('overwrite_session', 'true');
            }
        }

        // Add uploaded files
        if (fasFilesForInit) Array.from(fasFilesForInit).forEach(f => formData.append('fas_files_upload', f, f.name));
        if (ssFilesForInit) Array.from(ssFilesForInit).forEach(f => formData.append('ss_files_upload', f, f.name));
        if (rulesFileForInit) formData.append('shariah_rules_explicit_file_upload', rulesFileForInit, rulesFileForInit.name);

        // Add selected library files
        if (selectedLibraryFas.length > 0) formData.append('library_fas_filenames', JSON.stringify(selectedLibraryFas));
        if (selectedLibrarySs.length > 0) formData.append('library_ss_filenames', JSON.stringify(selectedLibrarySs));
    }
    
    // Ensure at least some source of files is provided if not loading a session
    if (!selectedSessionToLoad && !fasFilesForInit && !ssFilesForInit && selectedLibraryFas.length === 0 && selectedLibrarySs.length === 0) {
        setApiMessage({type:'error', text: "Please select files to process or a session to load."});
        setIsLoading(false);
        return;
    }


    try {
      // The /initialize endpoint in the backend is now modified to handle these params
      const response = await axios.post<InitResponse & {session_id?: string}>(`${API_BASE_URL}/initialize`, formData, {
         headers: { 'Content-Type': 'multipart/form-data' },
      });

      const data = response.data;
      setApiMessage({type: data.status === 'success' ? 'success' : 'error', text: `Init ${data.status}: ${data.message}`});
      if (data.status === 'success') {
        setIsSystemInitialized(true);
        setCurrentSessionId(data.session_id || null); // Backend should return the active session_id
        fetchSessions(); // Refresh session list
        // Clear input fields for new session name after successful save
        if (newSessionName.trim() && !selectedSessionToLoad) setNewSessionName(''); 
      } else {
        setIsSystemInitialized(false);
        setCurrentSessionId(null);
      }
    } catch (error: any) {
      setApiMessage({type: 'error', text: `Initialization request failed: ${error.response?.data?.message || error.message}`});
      setIsSystemInitialized(false);
      setCurrentSessionId(null);
    }
    setIsLoading(false);
  };
  const handleSessionSelection = (sessionId: string) => {
    setSelectedSessionToLoad(sessionId);
    const session = availableSessions.find(s => s.session_id === sessionId);
    if (session) {
      setNewSessionName(session.path); // Set the name to the session path
      setCurrentSessionId(session.session_id);
    }
  };


  const handleAcceptSuggestion = (suggestionPackageToAccept: ValidatedSuggestionPackage) => {
    const originalMarkdown = suggestionPackageToAccept.suggestion_details?.original_text || selectedText;
    const proposedMarkdown = suggestionPackageToAccept.suggestion_details?.proposed_text;

    if (currentMarkdownContent.includes(originalMarkdown) && proposedMarkdown && markdownEditorRef.current) {
        const editor = markdownEditorRef.current;
        const currentValue = editor.value; // Use current value from ref if textarea might not have re-rendered state
        const startIndex = currentValue.indexOf(originalMarkdown);

        if (startIndex !== -1) {
            const before = currentValue.substring(0, startIndex);
            const after = currentValue.substring(startIndex + originalMarkdown.length);
            const newContent = before + proposedMarkdown + after;
            
            setCurrentMarkdownContent(newContent); // Update state
            // For immediate visual update in textarea if it's controlled and state update is async:
            editor.value = newContent; 
            
            const newCursorPos = startIndex + proposedMarkdown.length;
            editor.focus();
            editor.setSelectionRange(newCursorPos, newCursorPos);

            setApiMessage({type:'success', text: `Suggestion from ${suggestionPackageToAccept.source_agent_name} applied!`});
            setSelectedText(proposedMarkdown);
        } else {
             setApiMessage({type:'warning', text: `Original snippet not found in editor to auto-apply. Proposed text copied.`});
             if (proposedMarkdown) navigator.clipboard.writeText(proposedMarkdown);
        }
    } else {
        setApiMessage({type:'warning', text: `Could not auto-apply (editor ref or text missing). Proposed text copied.`});
        if (proposedMarkdown) navigator.clipboard.writeText(proposedMarkdown);
    }
    setFinalSuggestionsForFAS(prev => prev.filter(s => s !== suggestionPackageToAccept));
  };

  const handleRejectSuggestion = (suggestionPackageToReject: ValidatedSuggestionPackage) => {
    setApiMessage({type:'info', text: `Suggestion from ${suggestionPackageToReject.source_agent_name} rejected.`});
    setFinalSuggestionsForFAS(prev => prev.filter(s => s !== suggestionPackageToReject));
  };

  // --- Render Logic ---
  const renderFasEditor = () => (
    <section className="bg-white p-5 rounded-lg shadow space-y-4">
        <h2 className="text-xl font-semibold text-slate-700 mb-3 flex items-center">
            <Edit3 size={20} className="mr-2 text-sky-600"/>FAS Document Editor & AI Assistant
        </h2>
        <FileUploader 
            label="Load FAS PDF (Extracts to Markdown)" 
            accept=".pdf" 
            onFilesUploaded={(file) => handleFasFileForProcessing(file as File)} 
            id="fas-marker-uploader" 
        />
        {currentDocumentId && <p className="text-sm text-slate-600 my-2">Editing: <strong>{currentDocumentId}</strong></p>}
        {currentMarkdownContent && (
            <div className="my-3">
                <span className="text-sm font-medium text-slate-700 mr-3">View:</span>
                <div className="inline-flex rounded-md shadow-sm" role="group">
                    <button type="button" onClick={() => setFasEditorViewMode('edit')} className={`btn-toggle ${fasEditorViewMode === 'edit' ? 'btn-toggle-active' : ''}`}>
                        <Edit size={14} className="inline mr-1"/> Edit Raw
                    </button>
                    <button type="button" onClick={() => setFasEditorViewMode('preview')} className={`btn-toggle ${fasEditorViewMode === 'preview' ? 'btn-toggle-active' : ''}`}>
                        <Eye size={14} className="inline mr-1"/> Preview
                    </button>
                    <button 
                      onClick={handleExportMarkdown} 
                      className="btn-secondary-small mt-3"
                    >
                      <Upload size={14} className="mr-1"/> Export Edited Markdown
                    </button>
                </div>
            </div>
        )}
        {fasEditorViewMode === 'edit' ? ( 
          console.log("Markdown Editor Ref:", markdownEditorRef.current),
            <textarea ref={markdownEditorRef} value={currentMarkdownContent} onChange={(e) => setCurrentMarkdownContent(e.target.value)} className="w-full min-h-[50vh] textarea-field" disabled={isExtractingText} placeholder={isExtractingText ? "Extracting..." : "Markdown will appear here."}/>
        ) : ( 
            <div ref={markdownPreviewRef} className="markdown-preview min-h-[50vh]">
                {isExtractingText ? <div className="loading-placeholder"><Loader2/>Loading preview...</div> : currentMarkdownContent ? <ReactMarkdown remarkPlugins={[remarkGfm]}>{currentMarkdownContent}</ReactMarkdown> : <p>No content.</p>}
                {/* Image Note */}
            </div>
        )}
        {selectedText && fasEditorViewMode === 'edit' && (
          console.log("Selected Text:", selectedText),
             <div className="mt-3 p-3 bg-sky-50 border border-sky-200 rounded-md">
                <p className="text-sm font-medium text-sky-700">Selected for AI Assistance (FAS Editor):</p>
                <pre className="selected-text-preview"><code>{selectedText}</code></pre>
                <div className="flex items-center space-x-2 mt-2">
                    <button onClick={handleGetAIAssistanceForFAS} disabled={isLoading || !selectedText.trim()} className="btn-primary-small flex-grow">
                       {isLoading ? <Loader2 className="inline mr-1 h-4 w-4 animate-spin"/> : <MessageSquare size={14} className="mr-1"/>} Get Suggestions
                    </button>
                    <button onClick={clearCurrentSelection} className="btn-secondary-small"><Scissors size={14}/></button>
                </div>
            </div>
        )}
    </section>
  );

  const renderContractSuite = () => (
    <section className="bg-white p-5 rounded-lg shadow space-y-6">
        <h2 className="text-xl font-semibold text-slate-700 mb-1 flex items-center">
            <ShieldCheck size={22} className="mr-2 text-teal-600"/> Shari'ah Contract Validation Suite
        </h2>
        <p className="text-xs text-slate-500 mb-4">Get AI-powered Shari'ah compliance checks and recommendations for your contract terms.</p>

        {!isSystemInitialized && (
             <div className="p-3 rounded-md text-sm bg-amber-100 text-amber-700 border-l-4 border-amber-500 flex items-start">
                <AlertTriangle size={20} className="mr-2 flex-shrink-0"/>
                <span>Please initialize the backend system first (Section 1) for optimal AI context and rule access. You can still proceed, but AI analysis might be limited.</span>
            </div>
        )}

        <div className="flex justify-between items-center">
            <div className="inline-flex rounded-md shadow-sm" role="group">
                <button type="button" onClick={() => setContractHelperMode('clause_by_clause')} className={`btn-toggle ${contractHelperMode === 'clause_by_clause' ? 'btn-toggle-active' : ''}`}>
                    <ListChecks size={16} className="inline mr-1.5"/> Clause-by-Clause
                </button>
                <button type="button" onClick={() => setContractHelperMode('full_contract')} className={`btn-toggle ${contractHelperMode === 'full_contract' ? 'btn-toggle-active' : ''}`}>
                    <FileSearch2 size={16} className="inline mr-1.5"/> Full Contract Review
                </button>
            </div>
            <button onClick={loadSampleContract} className="btn-secondary-small flex items-center">
                <FileSignature size={14} className="mr-1"/> Load Sample Salam
            </button>
        </div>
        
        <div>
            <label htmlFor="contractType" className="block text-sm font-medium text-slate-700">Contract Type:</label>
            <select id="contractType" value={contractType} onChange={(e) => setContractType(e.target.value)} className="mt-1 input-field">
                <option>Salam</option><option>Mudarabah</option><option>Murabaha</option><option>Ijarah</option><option>Istisna'a</option><option>Wakala</option><option>Partnership</option>
            </select>
        </div>

        {contractHelperMode === 'clause_by_clause' && (
            <div>
                <label htmlFor="clientClauses" className="block text-sm font-medium text-slate-700 mt-3">Proposed Clauses (one clause per line):</label>
                <textarea id="clientClauses" value={clientClausesInput} onChange={(e) => setClientClausesInput(e.target.value)} rows={10} className="mt-1 input-field font-mono text-xs" placeholder="e.g., Article 1: The Mudarib guarantees capital..."/>
            </div>
        )}
        {contractHelperMode === 'full_contract' && (
            <div>
                <label htmlFor="fullContractInput" className="block text-sm font-medium text-slate-700 mt-3">Full Contract Text:</label>
                <textarea id="fullContractInput" value={fullContractTextInput} onChange={(e) => setFullContractTextInput(e.target.value)} rows={15} className="mt-1 input-field font-mono text-xs" placeholder="Paste the entire proposed contract text here..."/>
            </div>
        )}
         <div>
            <label htmlFor="overallContractCtx" className="block text-sm font-medium text-slate-700 mt-3">Overall Contract Context/Purpose (Optional):</label>
            <textarea id="overallContractCtx" value={overallContractCtx} onChange={(e) => setOverallContractCtx(e.target.value)} rows={2} className="mt-1 input-field"/>
        </div>

        <button onClick={handleValidateContractTerms} disabled={isProcessingContract || isLoading} className="w-full btn-teal mt-4 py-2.5">
            {isProcessingContract ? <Loader2 className="inline mr-2 h-5 w-5 animate-spin"/> : '🛡️ '}
            {contractHelperMode === 'clause_by_clause' ? 'Validate Clauses & Get Recommendations' : 'Review Full Contract with AI'}
        </button>

        {/* Display Area for Contract Analysis Results */}
        {contractHelperMode === 'clause_by_clause' && clauseAnalysisResults.length > 0 && (
            <div className="mt-6 space-y-4">
            <h3 className="text-md font-semibold text-slate-700 flex items-center"><ListChecks className="mr-2"/> Clause Analysis Results:</h3>
            {clauseAnalysisResults.map(result => (
                <div key={result.clause_id} className="p-4 border border-slate-200 rounded-lg bg-slate-50 shadow-sm">
                    {/* ... Display logic for each clause result from previous example ... */}
                    <p className="text-xs text-slate-400 mb-1">Clause ID: {result.clause_id}</p>
                    <div className="original-clause mb-2">
                        <p className="text-sm font-medium text-slate-800">Original Client Clause:</p>
                        <pre className="text-xs bg-slate-200 p-2 rounded whitespace-pre-wrap font-mono">{result.original_text}</pre>
                    </div>
                    {result.skipped ? <p className="text-sm text-slate-500 italic">Skipped: {result.skipped_reason}</p> : <>
                        <div className={`text-sm mt-1 font-semibold p-1 rounded-sm inline-block `}>
                            Initial Validation: {result.validation_status || 'Pending...'}
                        </div>
                        {result.ai_suggestions.map((suggPack, idx) => (
                            <div key={idx} className="mt-3 pt-3 border-t border-slate-300">
                                <SuggestionCard suggestionPackage={suggPack} /* ... onAccept/onReject for contract ... */ 
                                    onAccept={() => { navigator.clipboard.writeText(suggPack.suggestion_details.proposed_text); setApiMessage({type:'success', text: `Suggested text copied!`});}}
                                    onReject={() => { console.log("Suggestion rejected"); setApiMessage({type:'info', text: `Suggestion rejected.`});}}
                                />
                            </div>
                        ))}
                    </>}
                </div>
            ))}
            </div>
        )}
        {contractHelperMode === 'full_contract' && fullContractReviewReport && (
    <div className="mt-6 space-y-4">
      <h3 className="text-lg font-semibold text-slate-800 border-b pb-2 mb-3">
        Full Contract Review Report
      </h3>

      {/* Overall Assessment and Summary */}
      <div className="p-4 border border-slate-300 rounded-lg bg-white shadow">
        <h4 className="text-md font-semibold text-sky-700 mb-2">Overall Assessment & Summary</h4>
        <p className={`text-lg font-bold mb-2 ${
            fullContractReviewReport.overall_assessment?.toLowerCase().includes('revision') || fullContractReviewReport.overall_assessment?.toLowerCase().includes('issues') ? 'text-red-600' :
            fullContractReviewReport.overall_assessment?.toLowerCase().includes('compliant') && !fullContractReviewReport.overall_assessment?.toLowerCase().includes('issues') ? 'text-green-600' :
            fullContractReviewReport.overall_assessment ? 'text-amber-600' : 'text-slate-700'
        }`}>
          {fullContractReviewReport.overall_assessment || 'N/A'}
        </p>
        <details className="text-sm text-slate-600">
          <summary className="cursor-pointer hover:text-sky-700 font-medium">View AI Summary & Alignment Notes</summary>
          <div className="mt-2 pl-4 border-l-2 border-slate-200">
            <p className="mt-1">
              <strong className="text-slate-700">AI Contract Summary:</strong> {fullContractReviewReport.contract_summary_by_ai || 'N/A'}
            </p>
            <p className="mt-2">
              <strong className="text-slate-700">Overall Shari'ah Alignment Notes:</strong> {fullContractReviewReport.overall_shariah_alignment_notes || 'N/A'}
            </p>
          </div>
        </details>
        {fullContractReviewReport.error && (
            <p className="mt-2 text-sm text-red-600 bg-red-50 p-2 rounded border border-red-200">
                <AlertCircle size={16} className="inline mr-1" /> Error during review: {fullContractReviewReport.error}
            </p>
        )}
      </div>

      {/* Identified Issues and Recommendations */}
      {fullContractReviewReport.identified_clauses_with_issues && fullContractReviewReport.identified_clauses_with_issues.length > 0 && (
        <div className="mt-4 p-4 border border-slate-300 rounded-lg bg-white shadow">
          <h4 className="text-md font-semibold text-sky-700 mb-3">Detailed Findings & Recommendations:</h4>
          <div className="space-y-4">
            {fullContractReviewReport.identified_clauses_with_issues.map((issue, index) => {
              let severityColorClass = 'text-slate-600 bg-slate-100 border-slate-300'; // Default/Info
              if (issue.severity?.toLowerCase().includes('high')) severityColorClass = 'text-red-700 bg-red-100 border-red-400';
              else if (issue.severity?.toLowerCase().includes('medium')) severityColorClass = 'text-amber-700 bg-amber-100 border-amber-400';
              else if (issue.severity?.toLowerCase().includes('low')) severityColorClass = 'text-green-700 bg-green-100 border-green-400';

              return (
                <div key={index} className="p-3 border border-slate-200 rounded-md hover:shadow-md transition-shadow bg-slate-50">
                  <div className="mb-2">
                    <span className={`px-2 py-0.5 text-xs font-semibold rounded-full border ${severityColorClass}`}>
                      Severity: {issue.severity || 'N/A'}
                    </span>
                  </div>
                  
                  <p className="text-xs text-slate-500 mb-1">Original Contract Snippet (Identified by AI):</p>
                  <blockquote className="text-xs italic border-l-2 border-slate-400 pl-3 my-1 bg-slate-100 p-2 rounded max-h-28 overflow-y-auto">
                    {issue.original_clause_text_snippet || "N/A"}
                  </blockquote>

                  <p className="text-sm mt-2">
                    <strong className="text-slate-700">Issue/Concern:</strong> {issue.issue_or_concern || 'N/A'}
                  </p>

                  {issue.relevant_shariah_rule_ids && issue.relevant_shariah_rule_ids.length > 0 && (
                    <p className="text-xs mt-1 text-slate-600">
                      <strong>Relevant Rule(s):</strong> {issue.relevant_shariah_rule_ids.join(', ')}
                    </p>
                  )}

                  <div className="mt-2">
                    <p className="text-sm font-medium text-emerald-700">AI Recommended Action/Modification:</p>
                    <pre className="text-xs bg-emerald-50 p-2 mt-1 rounded border border-emerald-200 whitespace-pre-wrap font-mono max-h-40 overflow-y-auto">
                      {issue.recommended_action_or_modification || 'N/A'}
                    </pre>
                     <button 
                        onClick={() => {
                            navigator.clipboard.writeText(issue.recommended_action_or_modification || '');
                            setApiMessage({type: 'success', text: 'Recommended modification copied to clipboard!'});
                        }}
                        className="text-xs mt-1 px-2 py-0.5 bg-sky-100 hover:bg-sky-200 text-sky-700 rounded"
                        disabled={!issue.recommended_action_or_modification}
                    >
                        Copy Recommendation
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}
      {(!fullContractReviewReport.identified_clauses_with_issues || fullContractReviewReport.identified_clauses_with_issues.length === 0) && !fullContractReviewReport.error && (
        <div className="mt-4 p-4 border border-green-300 rounded-lg bg-green-50 text-green-700 text-sm shadow">
          <CheckCircle size={18} className="inline mr-2"/>
          AI review found no major issues or has only low-severity enhancement suggestions based on the provided rules and context. Please check general recommendations if any.
        </div>
      )}


      {/* General Recommendations */}
      {fullContractReviewReport.general_recommendations && fullContractReviewReport.general_recommendations.length > 0 && (
        <div className="mt-4 p-4 border border-slate-300 rounded-lg bg-white shadow">
          <h4 className="text-md font-semibold text-sky-700 mb-2">General Recommendations:</h4>
          <ul className="list-disc list-inside text-sm text-slate-700 space-y-1 pl-2">
            {fullContractReviewReport.general_recommendations.map((rec, index) => (
              <li key={index}>{rec}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )
}
    </section>
  );


  return (
    <div className="app-container flex flex-col lg:flex-row h-screen max-h-screen bg-slate-100 text-slate-800">
      <main className="main-content flex-grow p-4 sm:p-6 space-y-6 overflow-y-auto">
                <header className="mb-6 flex justify-between items-center">
          <h1 className="text-2xl lg:text-3xl font-bold text-sky-700 flex items-center">
            <Settings size={30} className="mr-3 text-sky-600 rotate-[15deg]" /> ASAVE Interactive Suite
          </h1>
          {(isLoading || isProcessingContract) && (
            <button 
              onClick={() => {
                sseControllerRef.current?.abort();
                setIsLoading(false); setIsProcessingContract(false);
                setApiMessage({type: 'info', text: 'AI processing cancelled by user.'});
                setProgressLog(prev => [...prev, {event_type:"system_log", message: "⏹️ User cancelled AI processing.", step_code:"USER_CANCEL"}]);
              }}
              className="text-xs px-3 py-1.5 bg-orange-500 hover:bg-orange-600 text-white font-medium rounded-md shadow-sm"
            >
              Cancel AI
            </button>
          )}
        </header>
        {apiMessage && ( 
            <div className={`p-3 rounded-md text-sm ${apiMessage.type === 'error' ? 'bg-red-50 text-red-700 border-l-4 border-red-500' : apiMessage.type === 'success' ? 'bg-green-50 text-green-700 border-l-4 border-green-500' : apiMessage.type === 'warning' ? 'bg-yellow-50 text-yellow-700 border-l-4 border-yellow-500' : 'bg-blue-50 text-blue-700 border-l-4 border-blue-500'} flex items-start`}>
                {apiMessage.type === 'error' && <AlertTriangle size={20} className="mr-2 flex-shrink-0"/>}
                {apiMessage.type === 'success' && <CheckCircle size={20} className="mr-2 flex-shrink-0"/>}
                {apiMessage.type === 'warning' && <AlertTriangle size={20} className="mr-2 flex-shrink-0"/>}
                {apiMessage.type === 'info' && <Info size={20} className="mr-2 flex-shrink-0"/>}
                <span>{apiMessage.text}</span>
            </div>
         )}

        {/* Top Level App View Toggle */}
        <div className="flex space-x-2 border-b border-slate-300 pb-3 mb-6">
            <button onClick={() => setCurrentAppView('fas_editor')} className={`px-4 py-2 text-sm font-medium rounded-md flex items-center ${currentAppView === 'fas_editor' ? 'bg-sky-600 text-white shadow-md' : 'bg-white text-slate-700 hover:bg-slate-50 border border-slate-300'}`}>
                <Edit3 size={16} className="mr-2"/> FAS Document Editor
            </button>
            <button onClick={() => setCurrentAppView('contract_suite')} className={`px-4 py-2 text-sm font-medium rounded-md flex items-center ${currentAppView === 'contract_suite' ? 'bg-teal-600 text-white shadow-md' : 'bg-white text-slate-700 hover:bg-slate-50 border border-slate-300'}`}>
                <ShieldCheck size={16} className="mr-2"/> Shari'ah Contract Suite
            </button>
        </div>
        
        {/* Conditional Rendering of App Sections */}
        {currentAppView === 'fas_editor' && (
            <>
                <section className="bg-white p-5 rounded-lg shadow space-y-6">
                  <h2 className="text-lg font-semibold text-slate-700 flex items-center">
                    <Settings size={20} className="mr-2 text-sky-600"/>1. System Setup & Session Management
                  </h2>

                  {/* Tab-like interface for setup options */}
                  <div className="flex border-b border-slate-200 mb-4">
                    {/* These would be state-driven tabs if more complex */}
                    <button className="px-3 py-2 text-sm font-medium text-slate-600 border-b-2 border-transparent hover:border-sky-500 hover:text-sky-600 focus:outline-none focus:border-sky-700">
                      Initialize New/Default
                    </button>
                    {/* Add more buttons here for "Load Session" if you make it tabbed */}
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Column 1: Initialize with Files (Upload + Library) */}
                    <div className="space-y-4 p-3 border border-slate-200 rounded-md">
                      <h3 className="text-md font-medium text-slate-600">Initialize with Files:</h3>
                      
                      <p className="text-xs text-slate-500">Select files from your computer or the server's PDF library.</p>
                      
                      <div>
                        <h4 className="text-sm font-semibold text-slate-500 mb-1">Upload Files:</h4>
                        <FileUploader label="FAS PDF(s) Upload" accept=".pdf" multiple={true} onFilesUploaded={setFasFilesForInit} id="fas-init-upload" />
                        <FileUploader label="SS PDF(s) Upload" accept=".pdf" multiple={true} onFilesUploaded={setSsFilesForInit} id="ss-init-upload"/>
                        <FileUploader label="Explicit Rules JSON Upload (Optional)" accept=".json" onFilesUploaded={(file) => setRulesFileForInit(file as File)} id="rules-init-upload" />
                      </div>

                      {libraryPdfs.length > 0 && (
                        <div>
                          <h4 className="text-sm font-semibold text-slate-500 mb-1">Or Select from Server Library:</h4>
                          <div className="max-h-40 overflow-y-auto border p-2 rounded-md text-xs">
                            <p className="font-medium mb-1">FAS Files from Library:</p>
{libraryPdfs.filter(item => {
    if (item.type === 'file') {
        // Better file pattern matching for FAS files
        return item.name.toLowerCase().includes('fas') || 
               /f[a-z]*_?a[a-z]*_?s[a-z]*/i.test(item.name) ||
               item.name.toLowerCase().includes('financial_accounting_standard');
    } else if (item.type === 'directory') {
        // For directories
        return item.name.toLowerCase().includes('fas') || 
               item.name.toLowerCase().includes('financial') || 
               item.name.toLowerCase().includes('accounting');
    }
    return false;
}).map(item => (
    item.type === 'file' ? 
    <div key={item.name} className="flex items-center space-x-1">
        <input 
            type="checkbox" 
            id={`fas-${item.name}`}
            value={item.name} 
            onChange={(e) => {
                const name = e.target.value;
                setSelectedLibraryFas(prev => 
                    e.target.checked ? [...prev, name] : prev.filter(n => n !== name)
                );
            }} 
            className="text-sky-600 focus:ring-sky-500"
        />
        <label htmlFor={`fas-${item.name}`} className="text-xs truncate">{item.name}</label>
    </div>
    : <div key={item.name} className="ml-2">
        <p className="text-xs font-medium text-slate-700 mt-1">{item.name}/</p>
        <div className="pl-3">
        {item.files?.map(f => 
            <div key={f} className="flex items-center space-x-1">
                <input 
                    type="checkbox" 
                    id={`fas-${item.name}-${f}`}
                    value={`${item.name}/${f}`} 
                    onChange={(e) => {
                        const path = e.target.value;
                        setSelectedLibraryFas(prev => 
                            e.target.checked ? [...prev, path] : prev.filter(n => n !== path)
                        );
                    }}
                    className="text-sky-600 focus:ring-sky-500" 
                />
                <label htmlFor={`fas-${item.name}-${f}`} className="text-xs truncate">{f}</label>
            </div>
        )}
        </div>
    </div>
))}

<p className="font-medium mt-3 mb-1">SS Files from Library:</p>
{libraryPdfs.filter(item => {
    if (item.type === 'file') {
        // Better file pattern matching for SS files
        return item.name.toLowerCase().includes('ss') || 
               item.name.toLowerCase().includes('shariah') || 
               item.name.toLowerCase().includes('shari\'ah') || 
               item.name.toLowerCase().includes('sharia') || 
               /s[a-z]*_?s[a-z]*/i.test(item.name);
    } else if (item.type === 'directory') {
        // For directories
        return item.name.toLowerCase().includes('ss') || 
               item.name.toLowerCase().includes('shariah') || 
               item.name.toLowerCase().includes('shari\'ah') || 
               item.name.toLowerCase().includes('sharia') || 
               item.name.toLowerCase().includes('standard');
    }
    return false;
}).map(item => (
    item.type === 'file' ? 
    <div key={item.name} className="flex items-center space-x-1">
        <input 
            type="checkbox" 
            id={`ss-${item.name}`}
            value={item.name} 
            onChange={(e) => {
                const name = e.target.value;
                setSelectedLibrarySs(prev => 
                    e.target.checked ? [...prev, name] : prev.filter(n => n !== name)
                );
            }}
            className="text-teal-600 focus:ring-teal-500" 
        />
        <label htmlFor={`ss-${item.name}`} className="text-xs truncate">{item.name}</label>
    </div>
    : <div key={item.name} className="ml-2">
        <p className="text-xs font-medium text-slate-700 mt-1">{item.name}/</p>
        <div className="pl-3">
        {item.files?.map(f => 
            <div key={f} className="flex items-center space-x-1">
                <input 
                    type="checkbox" 
                    id={`ss-${item.name}-${f}`}
                    value={`${item.name}/${f}`} 
                    onChange={(e) => {
                        const path = e.target.value;
                        setSelectedLibrarySs(prev => 
                            e.target.checked ? [...prev, path] : prev.filter(n => n !== path)
                        );
                    }}
                    className="text-teal-600 focus:ring-teal-500" 
                />
                <label htmlFor={`ss-${item.name}-${f}`} className="text-xs truncate">{f}</label>
            </div>
        )}
        </div>
    </div>
))}
                          </div>
                        </div>
                      )}
                      <div className="mt-3">
                        <label htmlFor="newSessionName" className="block text-xs font-medium text-slate-700">Save this configuration as session (Optional):</label>
                        <input 
                            type="text" id="newSessionName" value={newSessionName} 
                            onChange={(e) => setNewSessionName(e.target.value)} 
                            placeholder="e.g., MyFAS_Project_Q1"
                            className="mt-1 input-field text-xs"
                        />
                        {newSessionName && <label className="text-xs flex items-center mt-1"><input type="checkbox" checked={overwriteSession} onChange={(e) => setOverwriteSession(e.target.checked)} className="mr-1"/> Overwrite if exists</label>}
                      </div>
                    </div>

                    {/* Column 2: Load Existing Session */}
                    <div className="space-y-4 p-3 border border-slate-200 rounded-md">
                      <h3 className="text-md font-medium text-slate-600">Or Load Existing Session:</h3>
                      {availableSessions.length > 0 ? (
                        <div className="space-y-2">
                          <select 
                            value={selectedSessionToLoad} 
                            onChange={(e) => {
                                setSelectedSessionToLoad(e.target.value);
                                if(e.target.value) { // If a session is chosen to load, clear new session name
                                    setNewSessionName('');
                                    // Clear file selections as we are loading, not creating with these files
                                    setSelectedLibraryFas([]);
                                    setSelectedLibrarySs([]);
                                    // Potentially clear uploaded file states too (setFasFilesForInit(null), etc.)
                                }
                            }}
                            className="input-field text-sm"
                          >
                            <option value="">-- Select a session to load --</option>
                            {availableSessions.map(session => (
                              <option key={session.session_id} value={session.session_id}>
                                {session.session_id} (FAS: {session.has_fas_db ? '✓':'✗'}, SS: {session.has_ss_db ? '✓':'✗'}, Mod: {session.last_modified})
                              </option>
                            ))}
                          </select>
                          {selectedSessionToLoad && <p className="text-xs text-sky-600">Loading session '{selectedSessionToLoad}' will use its stored vector databases.</p>}
                        </div>
                      ) : (
                        <p className="text-xs text-slate-500">No saved sessions found. Initialize one first.</p>
                      )}
                      <button onClick={fetchSessions} className="btn-secondary-small text-xs mt-2">Refresh Session List</button>
                    </div>
                  </div>
                  
                  <button 
                    onClick={handleInitializeModified} 
                    disabled={isLoading} 
                    className="w-full btn-primary mt-4 py-2.5"
                  >
                    {isLoading && apiMessage?.text.includes('Processing initialization') ? <Loader2 className="inline mr-2 h-5 w-5 animate-spin"/> : '🚀 '}
                    {selectedSessionToLoad ? `Load Session: ${selectedSessionToLoad}` : 'Initialize / Save Session'}
                  </button>
                  {currentSessionId && <p className="text-xs text-green-700 bg-green-100 p-2 rounded mt-2">✅ Active Session: <strong>{currentSessionId}</strong></p>}
                </section>
                 {isSystemInitialized && renderFasEditor()} 
                 {!isSystemInitialized && 
                    <div className="p-6 bg-yellow-50 text-yellow-700 rounded-md border border-yellow-300 text-center shadow">
                      <Info size={24} className="mx-auto mb-2"/>
                      <p className="font-medium">The ASAVE system backend needs to be initialized first.</p>
                      <p className="text-sm">Please go to "System Setup" and initialize with FAS/SS files or load a session to activate the AI features.</p>
                    </div>
                 }
            </>
        )}

        {currentAppView === 'contract_suite' && renderContractSuite()}
      
      </main>

      <Sidebar
        progressLog={progressLog}
        suggestions={currentAppView === 'fas_editor' ? finalSuggestionsForFAS : []} // Sidebar suggestions for FAS editor
        onAcceptSuggestion={handleAcceptSuggestion}
        onRejectSuggestion={handleRejectSuggestion  }
        isLoading={isLoading || isProcessingContract}
        className="w-full md:w-[450px] md:min-w-[400px] lg:w-[500px] lg:min-w-[450px] h-screen md:max-h-screen overflow-y-auto"
      />
    </div>
  );
};

export default App;


--- FILE : index.css ---


@import "tailwindcss";

/* Global focus style for accessibility */
*:focus-visible {
  outline: none;
  box-shadow: 0 0 0 2px #0ea5e9, 0 0 0 4px rgba(255, 255, 255, 0.8);
  border-radius: 0.25rem;
  transition: box-shadow 0.2s ease-in-out;
}
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.animate-slide-in-right {
  animation: slideInRight 0.4s ease-out;
}

/* Custom scrollbar styles */
.scrollbar-thin {
  scrollbar-width: thin;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 0.375rem;
  height: 0.375rem;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background-color: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background-color: #cbd5e1;
  border-radius: 9999px;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background-color: #94a3b8;
}
.scrollbar-thin::-webkit-scrollbar-thumb:active {
  background-color: #64748b;
}

/* Button styling */
.btn-primary {
  @apply py-2 px-4 bg-gradient-to-r from-sky-600 to-sky-500 hover:from-sky-700 hover:to-sky-600 text-white font-medium rounded-md shadow-sm disabled:bg-slate-400 disabled:from-slate-400 disabled:to-slate-400 transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0 disabled:transform-none;
}

.btn-primary-small { 
  @apply py-1.5 px-3 bg-gradient-to-r from-sky-600 to-sky-500 hover:from-sky-700 hover:to-sky-600 text-white text-sm font-medium rounded shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0;
}

.btn-secondary-small { 
  @apply py-1.5 px-3 bg-white border border-slate-300 hover:bg-slate-100 text-slate-700 text-sm font-medium rounded shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200;
}

.btn-teal { 
  @apply py-2 px-4 bg-gradient-to-r from-teal-600 to-teal-500 hover:from-teal-700 hover:to-teal-600 text-white font-medium rounded-md shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0 disabled:transform-none;
}

.btn-toggle { 
  @apply py-1 px-3 bg-slate-100 hover:bg-slate-200 text-slate-700 text-sm font-medium rounded-md border border-slate-300 transition-colors duration-200;
}

.btn-toggle-active { 
  @apply py-1 px-3 bg-sky-600 text-white text-sm font-medium rounded-md border border-sky-600 shadow-inner;
}

.input-field { 
  @apply mt-1 block w-full p-2 border border-slate-300 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 sm:text-sm;
}


--- FILE : main.tsx ---


// src/main.tsx (Recommended placement)
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);


--- FILE : vite-env.d.ts ---


/// <reference types="vite/client" />



--- FILE : FileUploader.tsx ---


// src/components/FileUploader.tsx
import React, { type ChangeEvent, useState } from 'react';
import { UploadCloud } from 'lucide-react';

interface FileUploaderProps {
  onFilesUploaded: (files: File | FileList | null) => void;
  label: string;
  accept: string;
  multiple?: boolean;
  id?: string;
}

const FileUploader: React.FC<FileUploaderProps> = ({
  onFilesUploaded,
  label,
  accept,
  multiple = false,
  id,
}) => {
  const [fileNames, setFileNames] = useState<string[]>([]);
  const inputId = id || `file-upload-${label.toLowerCase().replace(/\s+/g, '-')}`;

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      if (multiple) {
        onFilesUploaded(event.target.files);
        if (event.target.files.length > 0) {
          setFileNames(Array.from(event.target.files).map(f => f.name));
        } else {
          setFileNames([]);
        }
      } else {
        onFilesUploaded(event.target.files[0]);
        if (event.target.files.length > 0) {
          setFileNames([event.target.files[0].name]);
        } else {
          setFileNames([]);
        }
      }
    } else {
      onFilesUploaded(null);
      setFileNames([]);
    }
  };
  return (
    <div className="mb-4">
      <label htmlFor={inputId} className="block text-sm font-medium text-slate-700 mb-1">
        {label}
      </label>
      <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-slate-300 border-dashed rounded-md hover:border-[#0ea5e9] transition-colors bg-slate-50/50 group">
        <div className="space-y-1 text-center">
          <UploadCloud className="mx-auto h-10 w-10 text-slate-400 group-hover:text-[#0ea5e9] transition-colors" />
          <div className="flex text-sm text-slate-600">
            <label
              htmlFor={inputId}
              className="relative cursor-pointer rounded-md font-medium text-[#0284c7] hover:text-[#0ea5e9] focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-[#0ea5e9]"
            >
              <span className="hover:underline">Upload file{multiple ? 's' : ''}</span>
              <input id={inputId} name={inputId} type="file" className="sr-only" accept={accept} multiple={multiple} onChange={handleFileChange} />
            </label>
            <p className="pl-1">or drag and drop</p>
          </div>
          <p className="text-xs text-slate-500">{accept} files</p>
        </div>
      </div>
      {fileNames.length > 0 && (
        <div className="mt-2 text-xs flex flex-wrap gap-1">
          {fileNames.map((name, idx) => (
            <span key={idx} className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-[#e0f2fe] text-[#075985]">
              {name}
            </span>
          ))}
        </div>
      )}
    </div>
  );
};

export default FileUploader;


--- FILE : Sidebar.tsx ---


// src/components/Sidebar.tsx
import React, { useEffect, useState, useMemo } from 'react';
import SuggestionCard from './SuggestionCard';
import type { SSEEventData, ValidatedSuggestionPackage } from '../services/api';
import { Bot, CircleDashed, CheckCircle2, AlertTriangle, XCircle, Clock, Shield, ArrowRight } from 'lucide-react';

interface SidebarProps {
  progressLog: SSEEventData[];
  suggestions: ValidatedSuggestionPackage[];
  onAcceptSuggestion: (suggestionPackage: ValidatedSuggestionPackage) => void;
  onRejectSuggestion: (suggestionPackage: ValidatedSuggestionPackage) => void;
  isLoading: boolean;
  className?: string;
}

const getIconForStep = (event: SSEEventData) => {
    const step = event.step_code || event.event_type;
    const size = 18;
    if (event.event_type === "error" || event.event_type === "fatal_error" || (event.message && event.message.toLowerCase().includes("error"))) {
        return <XCircle className="text-red-500 mr-2 inline-block" size={size} />;
    }
    if (event.event_type === "warning") {
        return <AlertTriangle className="text-yellow-500 mr-2 inline-block" size={size} />;
    }
    if (step?.includes("START") || step?.includes("INITIATED")) {
        return <CircleDashed className="animate-spin text-sky-500 mr-2 inline-block" size={size} />;
    }
    if (step?.includes("DONE") || step?.includes("END") || step?.includes("RECEIVED") || step?.includes("COMPLETE") || event.event_type === "validated_suggestion_package" || event.event_type === "final_summary") {
        return <CheckCircle2 className="text-green-500 mr-2 inline-block" size={size} />;
    }
    return <Bot className="text-slate-500 mr-2 inline-block" size={size} />;
}

// Group logs by stage for better organization
interface LogGroup {
  stageName: string;
  logs: SSEEventData[];
  isComplete: boolean;
  hasErrors: boolean;
}

const Sidebar: React.FC<SidebarProps> = ({
  progressLog,
  suggestions,
  onAcceptSuggestion,
  onRejectSuggestion,
  isLoading,
  className = ''
}) => {
  const [showNotification, setShowNotification] = useState(false);
  const [notifiedSuggestionsCount, setNotifiedSuggestionsCount] = useState(0);
  const [expandedStages, setExpandedStages] = useState<Set<string>>(new Set(["current"]));
  
  // Group logs into stages for better readability
  const logGroups = useMemo(() => {
    const groups: LogGroup[] = [];
    let currentStage: LogGroup | null = null;
    
    // Helper to finalize a stage and add it to groups
    const finalizeStage = () => {
      if (currentStage && currentStage.logs.length > 0) {
        groups.push({...currentStage});
      }
    };
    
    progressLog.forEach(log => {
      const step = log.step_code || "";
      const isStart = step.includes("START") || step.includes("INITIATED");
      const isEnd = step.includes("DONE") || step.includes("END") || step.includes("COMPLETE");
      const hasError = log.event_type === "error" || log.event_type === "fatal_error" || (log.message && log.message.toLowerCase().includes("error"));
      
      // Detect new stage beginning
      if (isStart || (!currentStage && !isEnd)) {
        finalizeStage();
        currentStage = {
          stageName: log.agent_name || log.step_code || "Processing",
          logs: [log],
          isComplete: false,
          hasErrors: hasError
        };
      } 
      // Add to current stage
      else if (currentStage) {
        currentStage.logs.push(log);
        if (hasError) currentStage.hasErrors = true;
        if (isEnd) currentStage.isComplete = true;
      }
      // Orphaned end log with no start
      else {
        groups.push({
          stageName: log.agent_name || log.step_code || "Processing",
          logs: [log],
          isComplete: isEnd,
          hasErrors: hasError
        });
      }
      
      // If we finished a stage, add it and reset
      if (currentStage && isEnd) {
        finalizeStage();
        currentStage = null;
      }
    });
    
    // Add the last stage if it wasn't closed
    finalizeStage();
    
    return groups;
  }, [progressLog]);
  
  // Auto-expand the current (last non-complete) stage
  useEffect(() => {
    if (logGroups.length > 0) {
      // Find last non-complete group or the last group
      const currentGroupIndex = logGroups.findIndex(g => !g.isComplete);
      const currentGroupName = currentGroupIndex >= 0 ? 
        logGroups[currentGroupIndex].stageName : 
        logGroups[logGroups.length - 1].stageName;
      
      setExpandedStages(prev => {
        const newSet = new Set(prev);
        newSet.add(currentGroupName);
        return newSet;
      });
    }
  }, [logGroups]);
  
  // Show notification for new suggestions
  useEffect(() => {
    if (suggestions.length > notifiedSuggestionsCount && !isLoading) {
      setShowNotification(true);
      setNotifiedSuggestionsCount(suggestions.length);
      
      const timer = setTimeout(() => {
        setShowNotification(false);
      }, 8000);
      
      return () => clearTimeout(timer);
    }
  }, [suggestions, isLoading, notifiedSuggestionsCount]);

  // Toggle expanded state for a log group
  const toggleStageExpand = (stageName: string) => {
    setExpandedStages(prev => {
      const newSet = new Set(prev);
      if (newSet.has(stageName)) {
        newSet.delete(stageName);
      } else {
        newSet.add(stageName);
      }
      return newSet;
    });
  };

  return (
    <aside className={`sidebar w-[400px] min-w-[350px] p-5 border-l border-slate-300 h-full overflow-y-auto bg-white shadow-lg scrollbar-thin animate-slide-in-right ${className} relative`}>
      {/* Suggestion Ready Notification */}
      {showNotification && (
        <div className="absolute top-16 right-5 left-5 bg-gradient-to-r from-[#ebf8ff] to-[#e0f2fe] border-l-4 border-[#0ea5e9] rounded-md shadow-md p-4 z-10 animate-slide-in-right">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <Shield className="h-5 w-5 text-[#0284c7]" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-[#075985]">Suggestion Ready</h3>
              <div className="mt-1 text-xs text-[#0369a1]">
                <p>A new suggestion is available and will be reviewed for accuracy.</p>
                <div className="mt-2 flex items-center">
                  <Clock className="h-4 w-4 text-[#0284c7] mr-1" />
                  <p className="font-medium">Under review</p>
                </div>
              </div>
            </div>
            <button 
              className="ml-auto -mt-1 -mr-1 bg-white rounded-full p-1 hover:bg-[#f0f9ff]"
              onClick={() => setShowNotification(false)}
            >
              <span className="sr-only">Dismiss</span>
              <XCircle className="h-4 w-4 text-[#0284c7]" />
            </button>
          </div>
        </div>
      )}

      <h3 className="text-xl font-semibold text-[#0369a1] mb-4 flex items-center border-b pb-3 border-slate-200">
        <Bot size={24} className="mr-2 text-[#0284c7]" /> ASAVE AI Assistant
      </h3>
      
      <div className="progress-log mb-6 max-h-[40vh] overflow-y-auto border border-slate-200 rounded-md p-3 bg-slate-50 text-sm shadow-inner scrollbar-thin">
        <h4 className="text-md font-medium text-slate-600 mb-3 flex items-center">
          <span className="inline-flex items-center justify-center w-5 h-5 mr-2 rounded-full bg-[#e0f2fe] text-[#075985] text-xs">⚙️</span>
          Request Status
          {isLoading && <span className="ml-2 text-xs text-[#0284c7] animate-pulse flex items-center">
            <CircleDashed size={12} className="animate-spin mr-1" /> Processing
          </span>}
        </h4>
        
        {isLoading && progressLog.length === 0 && 
          <div className="flex items-center justify-center h-20 text-slate-500">
            <CircleDashed size={16} className="animate-spin mr-2" />
            <p>Initializing analysis...</p>
          </div>
        }
        
        {/* Grouped logs with collapsible sections */}
        {logGroups.length > 0 ? (
          <div className="space-y-2">
            {logGroups.map((group, groupIndex) => {
              const isExpanded = expandedStages.has(group.stageName);
              const isLastActive = !group.isComplete && groupIndex === logGroups.findIndex(g => !g.isComplete);
              const showExpandedByDefault = isLastActive || group.hasErrors;
              
              // Status indicator
              let statusBg = "bg-slate-100";
              let statusText = "text-slate-600";
              if (group.hasErrors) {
                statusBg = "bg-red-50";
                statusText = "text-red-600";
              } else if (group.isComplete) {
                statusBg = "bg-green-50";
                statusText = "text-green-600";
              } else if (isLoading) {
                statusBg = "bg-blue-50";
                statusText = "text-blue-600";
              }
              
              return (
                <div 
                  key={`group-${groupIndex}`} 
                  className={`border rounded-md overflow-hidden transition-all duration-200 ${
                    group.hasErrors ? 'border-red-200' : 
                    isLastActive ? 'border-blue-200 shadow-sm' : 
                    group.isComplete ? 'border-green-200' : 'border-slate-200'
                  }`}
                >
                  <button 
                    onClick={() => toggleStageExpand(group.stageName)}
                    className={`w-full flex items-center justify-between px-3 py-2 text-left text-sm ${statusBg} ${statusText} font-medium transition-colors hover:bg-opacity-80`}
                  >
                    <div className="flex items-center">
                      {group.hasErrors ? (
                        <XCircle size={16} className="mr-2 text-red-500" />
                      ) : group.isComplete ? (
                        <CheckCircle2 size={16} className="mr-2 text-green-500" />
                      ) : (
                        <CircleDashed size={16} className={`mr-2 ${isLoading ? "animate-spin text-blue-500" : "text-slate-500"}`} />
                      )}
                      <span>
                        {group.stageName}
                        {isLastActive && isLoading && <span className="ml-2 animate-pulse"> (In progress...)</span>}
                      </span>
                    </div>
                    <ArrowRight 
                      size={16} 
                      className={`transform transition-transform duration-200 ${isExpanded ? 'rotate-90' : ''}`} 
                    />
                  </button>
                  
                  {isExpanded && (
                    <div className="px-3 py-2 bg-white text-xs border-t border-slate-100">
                      {group.logs.map((log, logIndex) => (
                        <div 
                          key={`log-${groupIndex}-${logIndex}`} 
                          className={`py-1.5 ${logIndex < group.logs.length - 1 ? 'border-b border-slate-100' : ''}`}
                        >
                          <div className="flex">
                            <span className="w-5 flex-shrink-0">{getIconForStep(log)}</span>
                            <div className="flex-grow">
                              <span className="font-medium text-slate-700">
                                {log.agent_name || log.step_code || log.event_type}: 
                              </span>
                              <span className="ml-1 text-slate-600">{log.message}</span>
                              
                              {log.payload && typeof log.payload === 'object' && Object.keys(log.payload).length > 0 && (
                                <details className="mt-1 ml-1">
                                  <summary className="text-xs text-slate-500 cursor-pointer hover:text-[#0284c7]">Details</summary>
                                  <pre className="text-xs whitespace-pre-wrap break-all bg-slate-100 p-1.5 rounded mt-1 max-h-28 overflow-y-auto scrollbar-thin">{JSON.stringify(log.payload, null, 2)}</pre>
                                </details>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        ) : (
          <p className="text-slate-500 italic">No processing data yet.</p>
        )}
      </div>

      <hr className="my-4 border-slate-300" />
      <h4 className="text-md font-medium text-slate-600 mb-3 flex items-center">
        <span className="inline-flex items-center justify-center w-5 h-5 mr-2 rounded-full bg-[#e0f2fe] text-[#075985] text-xs">💡</span>
        Suggestions {suggestions.length > 0 && <span className="ml-2 px-2 py-0.5 bg-[#0ea5e9] text-white text-xs rounded-full">{suggestions.length}</span>}
      </h4>
      
      {suggestions && suggestions.length > 0 ? (
        <div className="space-y-4">
          {suggestions.map((suggPackage, index) => (
            <React.Fragment key={`${suggPackage.source_agent_name}-${index}`}>
              {index === 0 && (
                <div className="mb-3 px-3 py-2 bg-[#f0f9ff] border-l-4 border-[#0284c7] rounded-sm">
                  <p className="text-xs text-[#0369a1] flex items-center">
                    <Shield className="h-4 w-4 mr-1" />
                    <span className="font-medium">Suggestions under review</span>
                  </p>
                  <p className="text-xs text-slate-600 mt-1">
                    All suggestions are reviewed for accuracy before being applied.
                  </p>
                </div>
              )}
              <SuggestionCard
                suggestionPackage={suggPackage}
                onAccept={() => onAcceptSuggestion(suggPackage)}
                onReject={() => onRejectSuggestion(suggPackage)}
              />
            </React.Fragment>
          ))}
        </div>
      ) : (
        <p className="text-slate-500 italic">
          {isLoading ? "Waiting for suggestions..." : "No suggestions yet. Select text from a PDF and click 'Get AI Assistance'."}
        </p>
      )}
    </aside>
  );
};

export default Sidebar;


--- FILE : SuggestionCard.tsx ---


// src/components/SuggestionCard.tsx
import React, { useState } from 'react';
import { diffWordsWithSpace } from 'diff'; // Using 'diff' library
import type { ValidatedSuggestionPackage } from '../services/api';
import { ThumbsUp, ThumbsDown, ChevronDown, ChevronUp } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface SuggestionCardProps {
  suggestionPackage: ValidatedSuggestionPackage;
  onAccept: () => void;
  onReject: () => void;
}

const generateTextDiffHtml = (originalText: string = '', proposedText: string = ''): string => {
  if (!originalText && !proposedText) return "<span class='text-slate-500 italic'>No text provided for diff.</span>";
  const diffResult = diffWordsWithSpace(originalText || '', proposedText || '');
  let html = '';
  diffResult.forEach((part) => {
    const style = part.added
      ? 'bg-green-100 text-green-700'
      : part.removed
      ? 'bg-red-100 text-red-700 line-through'
      : 'text-slate-600';
    const partValueHtml = part.value.replace(/\n/g, "<br />");
    html += `<span class="${style}">${partValueHtml}</span>`;
  });
  return html;
};

const SuggestionCard: React.FC<SuggestionCardProps> = ({ suggestionPackage, onAccept, onReject }) => {
  const [showDetails, setShowDetails] = useState(false);
  const suggDetails = suggestionPackage.suggestion_details || {};
  const scvaReport = suggestionPackage.scva_report || {};
  const isccaReport = suggestionPackage.iscca_report || {};

  const originalText = suggDetails.original_text || "N/A (Original text not provided in suggestion)";
  const proposedText = suggDetails.proposed_text || "";  return (
    <div className="suggestion-card-container bg-white border border-slate-200 rounded-lg p-4 shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 group">
      <div className="flex justify-between items-start mb-2">
        <div>
            <p className="text-xs text-[#0369a1] font-semibold bg-[#e0f2fe] px-2.5 py-0.5 rounded-full inline-block">
                Source: {suggestionPackage.source_agent_name || 'Unknown Agent'}
            </p>
            <p className="text-xs text-slate-500 mt-1">Type: {suggDetails.change_type || 'N/A'}</p>
        </div>
        <button 
            onClick={() => setShowDetails(!showDetails)} 
            className="text-slate-500 hover:text-[#0284c7] p-1 rounded-full hover:bg-[#f0f9ff] transition-colors"
            title={showDetails ? "Hide Details" : "Show Details"}
        >
            {showDetails ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
        </button>
      </div>
        <h5 className="text-sm font-medium text-slate-700 mb-1">Proposed Change (Diff):</h5>
      <div 
        dangerouslySetInnerHTML={{ __html: generateTextDiffHtml(originalText, proposedText) }}
        className="diff-view border border-slate-300 p-2.5 rounded bg-slate-50 max-h-48 overflow-y-auto text-sm leading-relaxed scrollbar-thin"
      />
      
      <h5 className="text-sm font-medium text-slate-700 mt-3 mb-1">Markdown Preview:</h5>
      <div className="border border-slate-300 p-2.5 rounded bg-slate-50 max-h-48 overflow-y-auto text-sm prose prose-sm max-w-none scrollbar-thin">
        <ReactMarkdown remarkPlugins={[remarkGfm]}>
          {proposedText}
        </ReactMarkdown>
      </div>      <div className="mt-3 flex space-x-2">
        <button 
            onClick={onAccept} 
            className="flex items-center text-xs px-3 py-1.5 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-md shadow-sm transition-colors duration-200 transform hover:-translate-y-0.5 active:translate-y-0"
        >
            <ThumbsUp size={14} className="mr-1" /> Accept
        </button>
        <button 
            onClick={onReject} 
            className="flex items-center text-xs px-3 py-1.5 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white rounded-md shadow-sm transition-colors duration-200 transform hover:-translate-y-0.5 active:translate-y-0"
        >
            <ThumbsDown size={14} className="mr-1" /> Reject
        </button>
      </div>

      {showDetails && (
        <div className="mt-4 pt-3 border-t border-slate-200 text-xs text-slate-600 space-y-2">
          <div>
            <strong className="text-slate-700">Reasoning:</strong> {suggDetails.reasoning || 'N/A'}
          </div>
          <div>
            <strong className="text-slate-700">Shari'ah Notes (AISGA):</strong> {suggDetails.shariah_notes || 'N/A'}
          </div>
          <hr className="my-2"/>
          <h6 className="text-sm font-medium text-slate-700">Validation Summary: {suggestionPackage.validation_summary_score || 'N/A'}</h6>
          <details className="mt-1">
            <summary className="cursor-pointer hover:text-sky-600 font-medium">SCVA Report (Overall: {scvaReport.overall_status || 'N/A'})</summary>
            <pre className="whitespace-pre-wrap break-all bg-slate-100 p-2 mt-1 rounded max-h-40 overflow-y-auto">{JSON.stringify(scvaReport, null, 2)}</pre>
          </details>
          <details className="mt-1">
            <summary className="cursor-pointer hover:text-sky-600 font-medium">ISCCA Report (Status: {isccaReport.status || 'N/A'})</summary>
            <pre className="whitespace-pre-wrap break-all bg-slate-100 p-2 mt-1 rounded max-h-40 overflow-y-auto">{JSON.stringify(isccaReport, null, 2)}</pre>
          </details>
          <details className="mt-1">
            <summary className="cursor-pointer hover:text-sky-600 font-medium">AISGA Prompt Details</summary>
            <pre className="whitespace-pre-wrap break-all bg-slate-100 p-2 mt-1 rounded max-h-40 overflow-y-auto">{JSON.stringify(suggDetails.prompt_details_actual || {}, null, 2)}</pre>
          </details>
        </div>
      )}
    </div>
  );
};

export default SuggestionCard;


--- FILE : api.ts ---


/* eslint-disable @typescript-eslint/no-explicit-any */
// src/services/api.ts
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001';

export interface InitResponse {
  status: string;
  message: string;
  fas_vector_store_status?: string;
  ss_vector_store_status?: string;
  num_aisga_variants?: number;
  num_specialized_agents?: number;
}

export interface ApiStatusResponse {
  service_status: string;
  asave_initialized: boolean;
  config?: {
    google_api_key_set?: boolean;
    [key: string]: any;
  };
  components_loaded?: {
    [key: string]: boolean | number;
  };
}

// SSE Event Data Structures (examples, align with your backend)
export interface ProgressEventPayload {
  step_code?: string;
  agent_name?: string;
  message: string;
  payload?: any;
}

export interface ValidatedSuggestionPackage {
  source_agent_type: string;
  source_agent_name: string;
  suggestion_details: {
    original_text: string;
    proposed_text: string;
    change_type: string;
    reasoning: string;
    shariah_notes: string;
    prompt_details_actual?: any;
  };
  scva_report: any; // Define more specific types if possible
  iscca_report: any; // Define more specific types if possible
  validation_summary_score: string;
}

export interface SSEEventData {
  event_type: "system_log" | "progress" | "agent_suggestion_generated" | "validated_suggestion_package" | "warning" | "error" | "fatal_error" | "final_summary";
  message: string;
  step_code?: string;
  agent_name?: string;
  payload?: any | ValidatedSuggestionPackage | { total_validated_suggestions: number };
}


export const initializeSystem = async (formData: FormData): Promise<InitResponse> => {
  try {
    const response = await axios.post<InitResponse>(`${API_BASE_URL}/initialize`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    return response.data;
  } catch (error: any) {
    console.error("Error initializing system:", error.response?.data || error.message);
    throw error.response?.data || new Error("Network or initialization error");
  }
};

export const getAssistanceStreamUrl = (): string => `${API_BASE_URL}/get_assistance_stream`;

export const getApiStatus = async (): Promise<ApiStatusResponse> => {
    try {
        const response = await axios.get<ApiStatusResponse>(`${API_BASE_URL}/status`);
        return response.data;
    } catch (error: any) {
        console.error("Error fetching API status:", error.response?.data || error.message);
        throw error.response?.data || new Error("Network or status fetch error");
    }
};





--- FILE : vite-env.d.ts ---


/// <reference types="vite/client" />



--- FILE : FileUploader.tsx ---


// src/components/FileUploader.tsx
import React, { type ChangeEvent, useState } from 'react';
import { UploadCloud } from 'lucide-react';

interface FileUploaderProps {
  onFilesUploaded: (files: File | FileList | null) => void;
  label: string;
  accept: string;
  multiple?: boolean;
  id?: string;
}

const FileUploader: React.FC<FileUploaderProps> = ({
  onFilesUploaded,
  label,
  accept,
  multiple = false,
  id,
}) => {
  const [fileNames, setFileNames] = useState<string[]>([]);
  const inputId = id || `file-upload-${label.toLowerCase().replace(/\s+/g, '-')}`;

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      if (multiple) {
        onFilesUploaded(event.target.files);
        if (event.target.files.length > 0) {
          setFileNames(Array.from(event.target.files).map(f => f.name));
        } else {
          setFileNames([]);
        }
      } else {
        onFilesUploaded(event.target.files[0]);
        if (event.target.files.length > 0) {
          setFileNames([event.target.files[0].name]);
        } else {
          setFileNames([]);
        }
      }
    } else {
      onFilesUploaded(null);
      setFileNames([]);
    }
  };
  return (
    <div className="mb-4">
      <label htmlFor={inputId} className="block text-sm font-medium text-slate-700 mb-1">
        {label}
      </label>
      <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-slate-300 border-dashed rounded-md hover:border-[#0ea5e9] transition-colors bg-slate-50/50 group">
        <div className="space-y-1 text-center">
          <UploadCloud className="mx-auto h-10 w-10 text-slate-400 group-hover:text-[#0ea5e9] transition-colors" />
          <div className="flex text-sm text-slate-600">
            <label
              htmlFor={inputId}
              className="relative cursor-pointer rounded-md font-medium text-[#0284c7] hover:text-[#0ea5e9] focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-[#0ea5e9]"
            >
              <span className="hover:underline">Upload file{multiple ? 's' : ''}</span>
              <input id={inputId} name={inputId} type="file" className="sr-only" accept={accept} multiple={multiple} onChange={handleFileChange} />
            </label>
            <p className="pl-1">or drag and drop</p>
          </div>
          <p className="text-xs text-slate-500">{accept} files</p>
        </div>
      </div>
      {fileNames.length > 0 && (
        <div className="mt-2 text-xs flex flex-wrap gap-1">
          {fileNames.map((name, idx) => (
            <span key={idx} className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-[#e0f2fe] text-[#075985]">
              {name}
            </span>
          ))}
        </div>
      )}
    </div>
  );
};

export default FileUploader;


--- FILE : Sidebar.tsx ---


// src/components/Sidebar.tsx
import React, { useEffect, useState, useMemo } from 'react';
import SuggestionCard from './SuggestionCard';
import type { SSEEventData, ValidatedSuggestionPackage } from '../services/api';
import { Bot, CircleDashed, CheckCircle2, AlertTriangle, XCircle, Clock, Shield, ArrowRight } from 'lucide-react';

interface SidebarProps {
  progressLog: SSEEventData[];
  suggestions: ValidatedSuggestionPackage[];
  onAcceptSuggestion: (suggestionPackage: ValidatedSuggestionPackage) => void;
  onRejectSuggestion: (suggestionPackage: ValidatedSuggestionPackage) => void;
  isLoading: boolean;
  className?: string;
}

const getIconForStep = (event: SSEEventData) => {
    const step = event.step_code || event.event_type;
    const size = 18;
    if (event.event_type === "error" || event.event_type === "fatal_error" || (event.message && event.message.toLowerCase().includes("error"))) {
        return <XCircle className="text-red-500 mr-2 inline-block" size={size} />;
    }
    if (event.event_type === "warning") {
        return <AlertTriangle className="text-yellow-500 mr-2 inline-block" size={size} />;
    }
    if (step?.includes("START") || step?.includes("INITIATED")) {
        return <CircleDashed className="animate-spin text-sky-500 mr-2 inline-block" size={size} />;
    }
    if (step?.includes("DONE") || step?.includes("END") || step?.includes("RECEIVED") || step?.includes("COMPLETE") || event.event_type === "validated_suggestion_package" || event.event_type === "final_summary") {
        return <CheckCircle2 className="text-green-500 mr-2 inline-block" size={size} />;
    }
    return <Bot className="text-slate-500 mr-2 inline-block" size={size} />;
}

// Group logs by stage for better organization
interface LogGroup {
  stageName: string;
  logs: SSEEventData[];
  isComplete: boolean;
  hasErrors: boolean;
}

const Sidebar: React.FC<SidebarProps> = ({
  progressLog,
  suggestions,
  onAcceptSuggestion,
  onRejectSuggestion,
  isLoading,
  className = ''
}) => {
  const [showNotification, setShowNotification] = useState(false);
  const [notifiedSuggestionsCount, setNotifiedSuggestionsCount] = useState(0);
  const [expandedStages, setExpandedStages] = useState<Set<string>>(new Set(["current"]));
  
  // Group logs into stages for better readability
  const logGroups = useMemo(() => {
    const groups: LogGroup[] = [];
    let currentStage: LogGroup | null = null;
    
    // Helper to finalize a stage and add it to groups
    const finalizeStage = () => {
      if (currentStage && currentStage.logs.length > 0) {
        groups.push({...currentStage});
      }
    };
    
    progressLog.forEach(log => {
      const step = log.step_code || "";
      const isStart = step.includes("START") || step.includes("INITIATED");
      const isEnd = step.includes("DONE") || step.includes("END") || step.includes("COMPLETE");
      const hasError = log.event_type === "error" || log.event_type === "fatal_error" || (log.message && log.message.toLowerCase().includes("error"));
      
      // Detect new stage beginning
      if (isStart || (!currentStage && !isEnd)) {
        finalizeStage();
        currentStage = {
          stageName: log.agent_name || log.step_code || "Processing",
          logs: [log],
          isComplete: false,
          hasErrors: hasError
        };
      } 
      // Add to current stage
      else if (currentStage) {
        currentStage.logs.push(log);
        if (hasError) currentStage.hasErrors = true;
        if (isEnd) currentStage.isComplete = true;
      }
      // Orphaned end log with no start
      else {
        groups.push({
          stageName: log.agent_name || log.step_code || "Processing",
          logs: [log],
          isComplete: isEnd,
          hasErrors: hasError
        });
      }
      
      // If we finished a stage, add it and reset
      if (currentStage && isEnd) {
        finalizeStage();
        currentStage = null;
      }
    });
    
    // Add the last stage if it wasn't closed
    finalizeStage();
    
    return groups;
  }, [progressLog]);
  
  // Auto-expand the current (last non-complete) stage
  useEffect(() => {
    if (logGroups.length > 0) {
      // Find last non-complete group or the last group
      const currentGroupIndex = logGroups.findIndex(g => !g.isComplete);
      const currentGroupName = currentGroupIndex >= 0 ? 
        logGroups[currentGroupIndex].stageName : 
        logGroups[logGroups.length - 1].stageName;
      
      setExpandedStages(prev => {
        const newSet = new Set(prev);
        newSet.add(currentGroupName);
        return newSet;
      });
    }
  }, [logGroups]);
  
  // Show notification for new suggestions
  useEffect(() => {
    if (suggestions.length > notifiedSuggestionsCount && !isLoading) {
      setShowNotification(true);
      setNotifiedSuggestionsCount(suggestions.length);
      
      const timer = setTimeout(() => {
        setShowNotification(false);
      }, 8000);
      
      return () => clearTimeout(timer);
    }
  }, [suggestions, isLoading, notifiedSuggestionsCount]);

  // Toggle expanded state for a log group
  const toggleStageExpand = (stageName: string) => {
    setExpandedStages(prev => {
      const newSet = new Set(prev);
      if (newSet.has(stageName)) {
        newSet.delete(stageName);
      } else {
        newSet.add(stageName);
      }
      return newSet;
    });
  };

  return (
    <aside className={`sidebar w-[400px] min-w-[350px] p-5 border-l border-slate-300 h-full overflow-y-auto bg-white shadow-lg scrollbar-thin animate-slide-in-right ${className} relative`}>
      {/* Suggestion Ready Notification */}
      {showNotification && (
        <div className="absolute top-16 right-5 left-5 bg-gradient-to-r from-[#ebf8ff] to-[#e0f2fe] border-l-4 border-[#0ea5e9] rounded-md shadow-md p-4 z-10 animate-slide-in-right">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <Shield className="h-5 w-5 text-[#0284c7]" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-[#075985]">Suggestion Ready</h3>
              <div className="mt-1 text-xs text-[#0369a1]">
                <p>A new suggestion is available and will be reviewed for accuracy.</p>
                <div className="mt-2 flex items-center">
                  <Clock className="h-4 w-4 text-[#0284c7] mr-1" />
                  <p className="font-medium">Under review</p>
                </div>
              </div>
            </div>
            <button 
              className="ml-auto -mt-1 -mr-1 bg-white rounded-full p-1 hover:bg-[#f0f9ff]"
              onClick={() => setShowNotification(false)}
            >
              <span className="sr-only">Dismiss</span>
              <XCircle className="h-4 w-4 text-[#0284c7]" />
            </button>
          </div>
        </div>
      )}

      <h3 className="text-xl font-semibold text-[#0369a1] mb-4 flex items-center border-b pb-3 border-slate-200">
        <Bot size={24} className="mr-2 text-[#0284c7]" /> ASAVE AI Assistant
      </h3>
      
      <div className="progress-log mb-6 max-h-[40vh] overflow-y-auto border border-slate-200 rounded-md p-3 bg-slate-50 text-sm shadow-inner scrollbar-thin">
        <h4 className="text-md font-medium text-slate-600 mb-3 flex items-center">
          <span className="inline-flex items-center justify-center w-5 h-5 mr-2 rounded-full bg-[#e0f2fe] text-[#075985] text-xs">⚙️</span>
          Request Status
          {isLoading && <span className="ml-2 text-xs text-[#0284c7] animate-pulse flex items-center">
            <CircleDashed size={12} className="animate-spin mr-1" /> Processing
          </span>}
        </h4>
        
        {isLoading && progressLog.length === 0 && 
          <div className="flex items-center justify-center h-20 text-slate-500">
            <CircleDashed size={16} className="animate-spin mr-2" />
            <p>Initializing analysis...</p>
          </div>
        }
        
        {/* Grouped logs with collapsible sections */}
        {logGroups.length > 0 ? (
          <div className="space-y-2">
            {logGroups.map((group, groupIndex) => {
              const isExpanded = expandedStages.has(group.stageName);
              const isLastActive = !group.isComplete && groupIndex === logGroups.findIndex(g => !g.isComplete);
              const showExpandedByDefault = isLastActive || group.hasErrors;
              
              // Status indicator
              let statusBg = "bg-slate-100";
              let statusText = "text-slate-600";
              if (group.hasErrors) {
                statusBg = "bg-red-50";
                statusText = "text-red-600";
              } else if (group.isComplete) {
                statusBg = "bg-green-50";
                statusText = "text-green-600";
              } else if (isLoading) {
                statusBg = "bg-blue-50";
                statusText = "text-blue-600";
              }
              
              return (
                <div 
                  key={`group-${groupIndex}`} 
                  className={`border rounded-md overflow-hidden transition-all duration-200 ${
                    group.hasErrors ? 'border-red-200' : 
                    isLastActive ? 'border-blue-200 shadow-sm' : 
                    group.isComplete ? 'border-green-200' : 'border-slate-200'
                  }`}
                >
                  <button 
                    onClick={() => toggleStageExpand(group.stageName)}
                    className={`w-full flex items-center justify-between px-3 py-2 text-left text-sm ${statusBg} ${statusText} font-medium transition-colors hover:bg-opacity-80`}
                  >
                    <div className="flex items-center">
                      {group.hasErrors ? (
                        <XCircle size={16} className="mr-2 text-red-500" />
                      ) : group.isComplete ? (
                        <CheckCircle2 size={16} className="mr-2 text-green-500" />
                      ) : (
                        <CircleDashed size={16} className={`mr-2 ${isLoading ? "animate-spin text-blue-500" : "text-slate-500"}`} />
                      )}
                      <span>
                        {group.stageName}
                        {isLastActive && isLoading && <span className="ml-2 animate-pulse"> (In progress...)</span>}
                      </span>
                    </div>
                    <ArrowRight 
                      size={16} 
                      className={`transform transition-transform duration-200 ${isExpanded ? 'rotate-90' : ''}`} 
                    />
                  </button>
                  
                  {isExpanded && (
                    <div className="px-3 py-2 bg-white text-xs border-t border-slate-100">
                      {group.logs.map((log, logIndex) => (
                        <div 
                          key={`log-${groupIndex}-${logIndex}`} 
                          className={`py-1.5 ${logIndex < group.logs.length - 1 ? 'border-b border-slate-100' : ''}`}
                        >
                          <div className="flex">
                            <span className="w-5 flex-shrink-0">{getIconForStep(log)}</span>
                            <div className="flex-grow">
                              <span className="font-medium text-slate-700">
                                {log.agent_name || log.step_code || log.event_type}: 
                              </span>
                              <span className="ml-1 text-slate-600">{log.message}</span>
                              
                              {log.payload && typeof log.payload === 'object' && Object.keys(log.payload).length > 0 && (
                                <details className="mt-1 ml-1">
                                  <summary className="text-xs text-slate-500 cursor-pointer hover:text-[#0284c7]">Details</summary>
                                  <pre className="text-xs whitespace-pre-wrap break-all bg-slate-100 p-1.5 rounded mt-1 max-h-28 overflow-y-auto scrollbar-thin">{JSON.stringify(log.payload, null, 2)}</pre>
                                </details>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        ) : (
          <p className="text-slate-500 italic">No processing data yet.</p>
        )}
      </div>

      <hr className="my-4 border-slate-300" />
      <h4 className="text-md font-medium text-slate-600 mb-3 flex items-center">
        <span className="inline-flex items-center justify-center w-5 h-5 mr-2 rounded-full bg-[#e0f2fe] text-[#075985] text-xs">💡</span>
        Suggestions {suggestions.length > 0 && <span className="ml-2 px-2 py-0.5 bg-[#0ea5e9] text-white text-xs rounded-full">{suggestions.length}</span>}
      </h4>
      
      {suggestions && suggestions.length > 0 ? (
        <div className="space-y-4">
          {suggestions.map((suggPackage, index) => (
            <React.Fragment key={`${suggPackage.source_agent_name}-${index}`}>
              {index === 0 && (
                <div className="mb-3 px-3 py-2 bg-[#f0f9ff] border-l-4 border-[#0284c7] rounded-sm">
                  <p className="text-xs text-[#0369a1] flex items-center">
                    <Shield className="h-4 w-4 mr-1" />
                    <span className="font-medium">Suggestions under review</span>
                  </p>
                  <p className="text-xs text-slate-600 mt-1">
                    All suggestions are reviewed for accuracy before being applied.
                  </p>
                </div>
              )}
              <SuggestionCard
                suggestionPackage={suggPackage}
                onAccept={() => onAcceptSuggestion(suggPackage)}
                onReject={() => onRejectSuggestion(suggPackage)}
              />
            </React.Fragment>
          ))}
        </div>
      ) : (
        <p className="text-slate-500 italic">
          {isLoading ? "Waiting for suggestions..." : "No suggestions yet. Select text from a PDF and click 'Get AI Assistance'."}
        </p>
      )}
    </aside>
  );
};

export default Sidebar;


--- FILE : SuggestionCard.tsx ---


// src/components/SuggestionCard.tsx
import React, { useState } from 'react';
import { diffWordsWithSpace } from 'diff';
import type { ValidatedSuggestionPackage } from '../services/api'; // Ensure this path is correct
import { ThumbsUp, ThumbsDown, ChevronDown, ChevronUp, Zap, Percent, Info as InfoIcon, MessageCircle } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface SuggestionCardProps {
  suggestionPackage: ValidatedSuggestionPackage;
  onAccept: () => void;
  onReject: () => void;
  isHighlighted?: boolean; // New prop for highlighting
}

const generateTextDiffHtml = (originalText: string = '', proposedText: string = ''): string => {
  if (!originalText && !proposedText) return "<span class='text-slate-400 italic text-xs'>No text provided for diff.</span>";
  const diffResult = diffWordsWithSpace(originalText || '', proposedText || '');
  let html = '';
  diffResult.forEach((part) => {
    const style = part.added
      ? 'bg-green-100 text-green-800 font-medium px-0.5 rounded-sm' // Enhanced added style
      : part.removed
      ? 'bg-red-100 text-red-800 line-through px-0.5 rounded-sm' // Enhanced removed style
      : 'text-slate-700'; // Normal text
    // Preserve newlines from Markdown by converting to <br /> for dangerouslySetInnerHTML
    const partValueHtml = part.value.replace(/\n/g, "<br />");
    html += `<span class="${style}">${partValueHtml}</span>`;
  });
  return html;
};

// Helper to add emojis to reasoning if not already present (simple example)
// A more robust solution would be LLM adding them or more advanced NLP.
const formatReasoningWithEmoji = (reasoning: string = ""): string => {
    if (!reasoning) return "N/A";
    // Simple keyword check - can be expanded
    if (reasoning.toLowerCase().includes("compliance") && !reasoning.includes("‚úÖ")) return `‚úÖ ${reasoning}`;
    if (reasoning.toLowerCase().includes("clarity") && !reasoning.includes("üí°")) return `üí° ${reasoning}`;
    if (reasoning.toLowerCase().includes("risk") && !reasoning.includes("‚ö†Ô∏è")) return `‚ö†Ô∏è ${reasoning}`;
    if (reasoning.toLowerCase().includes("ambiguity") && !reasoning.includes("‚ùì")) return `‚ùì ${reasoning}`;
    return reasoning;
};


const SuggestionCard: React.FC<SuggestionCardProps> = ({ 
    suggestionPackage, 
    onAccept, 
    onReject,
    isHighlighted = false 
}) => {
  const [showDetails, setShowDetails] = useState(false);
  const suggDetails = suggestionPackage.suggestion_details || {};
  const scvaReport = suggestionPackage.scva_report || {};
  const isccaReport = suggestionPackage.iscca_report || {};

  const originalText = suggDetails.original_text || "N/A (Original text not provided)";
  const proposedText = suggDetails.proposed_text || "";
  const confidenceScore = suggDetails.confidence_score; // Can be undefined

  const cardBaseClass = "suggestion-card-container bg-white border rounded-lg p-3 shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-px group";
  const highlightedClass = isHighlighted ? "border-purple-500 border-2 ring-2 ring-purple-300 shadow-purple-200/50" : "border-slate-200";

  return (
    <div className={`${cardBaseClass} ${highlightedClass}`}>
      <div className="flex justify-between items-start mb-1.5">
        <div>
            <p className="text-[11px] text-sky-700 font-semibold bg-sky-100 px-2 py-0.5 rounded-full inline-block">
                Source: {suggestionPackage.source_agent_name || 'Unknown Agent'}
            </p>
            {suggDetails.change_type && <p className="text-[10px] text-slate-500 mt-0.5 ml-0.5">Type: {suggDetails.change_type}</p>}
        </div>
        <div className="flex items-center">
            {confidenceScore !== undefined && (
                <div className={`flex items-center text-xs font-medium mr-2 px-1.5 py-0.5 rounded-full border ${
                    confidenceScore >= 80 ? 'bg-green-50 text-green-700 border-green-300' :
                    confidenceScore >= 60 ? 'bg-yellow-50 text-yellow-700 border-yellow-300' :
                    'bg-red-50 text-red-700 border-red-300'
                }`} title={`AI Confidence: ${confidenceScore}%`}>
                    <Zap size={12} className="mr-0.5"/> {confidenceScore}%
                </div>
            )}
            <button 
                onClick={() => setShowDetails(!showDetails)} 
                className="text-slate-400 hover:text-sky-600 p-0.5 rounded-full hover:bg-slate-100 transition-colors"
                title={showDetails ? "Hide Details" : "Show Details"}
            >
                {showDetails ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
            </button>
        </div>
      </div>
      
      {isHighlighted && (
        <div className="mb-1.5 text-xs text-purple-700 font-medium flex items-center bg-purple-50 p-1 rounded-md border border-purple-200">
            <Percent size={12} className="mr-1"/> Highlighted: High Confidence & Meets Threshold
        </div>
      )}

      <h5 className="text-xs font-medium text-slate-600 mb-0.5 mt-1">Proposed Change (Diff):</h5>
      <div 
        dangerouslySetInnerHTML={{ __html: generateTextDiffHtml(originalText, proposedText) }}
        className="diff-view border border-slate-200 p-1.5 rounded bg-slate-50/70 max-h-32 overflow-y-auto text-xs leading-relaxed scrollbar-thin scrollbar-thumb-slate-300"
      />
      
      <details className="mt-1.5 group/markdown">
        <summary className="text-xs font-medium text-slate-600 cursor-pointer hover:text-sky-700 list-none flex items-center">
            <ChevronDown size={14} className="mr-0.5 text-slate-400 group-open/markdown:rotate-180 transition-transform"/>
            Markdown Preview
        </summary>
        <div className="border border-slate-200 p-1.5 mt-0.5 rounded bg-slate-50/70 max-h-32 overflow-y-auto text-xs prose prose-xs max-w-none scrollbar-thin scrollbar-thumb-slate-300">
            {proposedText ? <ReactMarkdown remarkPlugins={[remarkGfm]}>{proposedText}</ReactMarkdown> : <p className="italic text-slate-500">No proposed text to preview.</p>}
        </div>
      </details>
      
      <div className="mt-2 flex space-x-1.5">
        <button 
            onClick={onAccept} 
            className="flex items-center text-[11px] px-2 py-1 bg-green-500 hover:bg-green-600 text-white rounded-md shadow-sm transition-colors duration-150 transform hover:-translate-y-px active:translate-y-0"
        >
            <ThumbsUp size={12} className="mr-1" /> Accept
        </button>
        <button 
            onClick={onReject} 
            className="flex items-center text-[11px] px-2 py-1 bg-red-500 hover:bg-red-600 text-white rounded-md shadow-sm transition-colors duration-150 transform hover:-translate-y-px active:translate-y-0"
        >
            <ThumbsDown size={12} className="mr-1" /> Reject
        </button>
      </div>

      {showDetails && (
        <div className="mt-2.5 pt-2 border-t border-slate-200 text-[11px] text-slate-600 space-y-1.5">
          <div className="flex items-start">
            <MessageCircle size={12} className="mr-1 mt-0.5 text-slate-500 shrink-0"/> 
            <div><strong className="text-slate-700">Reasoning:</strong> {formatReasoningWithEmoji(suggDetails.reasoning)}</div>
          </div>
          <div className="flex items-start">
            <InfoIcon size={12} className="mr-1 mt-0.5 text-slate-500 shrink-0"/>
            <div><strong className="text-slate-700">Shari'ah Notes (AISGA):</strong> {suggDetails.shariah_notes || 'N/A'}</div>
          </div>
          
          <hr className="my-1"/>
          <h6 className="text-[10px] font-medium text-slate-700">Validation Summary: {suggestionPackage.validation_summary_score || 'N/A'}</h6>
          <details className="text-[10px]">
            <summary className="cursor-pointer hover:text-sky-600 font-medium">SCVA Report (Overall: {scvaReport?.overall_status || 'N/A'})</summary>
            <pre className="whitespace-pre-wrap break-all bg-slate-100 p-1 mt-0.5 rounded max-h-28 overflow-y-auto scrollbar-thin">{JSON.stringify(scvaReport, null, 2)}</pre>
          </details>
          <details className="text-[10px]">
            <summary className="cursor-pointer hover:text-sky-600 font-medium">ISCCA Report (Status: {isccaReport?.status || 'N/A'})</summary>
            <pre className="whitespace-pre-wrap break-all bg-slate-100 p-1 mt-0.5 rounded max-h-28 overflow-y-auto scrollbar-thin">{JSON.stringify(isccaReport, null, 2)}</pre>
          </details>
          {suggDetails.prompt_details_actual && (
            <details className="text-[10px]">
                <summary className="cursor-pointer hover:text-sky-600 font-medium">AISGA Prompt Details</summary>
                <pre className="whitespace-pre-wrap break-all bg-slate-100 p-1 mt-0.5 rounded max-h-28 overflow-y-auto scrollbar-thin">{JSON.stringify(suggDetails.prompt_details_actual, null, 2)}</pre>
            </details>
          )}
        </div>
      )}
    </div>
  );
};

export default SuggestionCard;


--- FILE : api.ts ---


/* eslint-disable @typescript-eslint/no-explicit-any */
// src/services/api.ts
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001';

export interface InitResponse {
  status: string;
  message: string;
  fas_vector_store_status?: string;
  ss_vector_store_status?: string;
  num_aisga_variants?: number;
  num_specialized_agents?: number;
  session_id?: string;
}

export interface ApiStatusResponse {
  service_status: string;
  asave_initialized: boolean;
  current_session_id?: string;
  config?: {
    google_api_key_set?: boolean;
    [key: string]: any;
  };
  components_loaded?: {
    [key: string]: boolean | number;
  };
}

export interface SuggestionDetails {
    original_text: string;
    proposed_text: string;
    change_type: string;
    reasoning: string;
    shariah_notes: string;
    prompt_details_actual?: any;
    confidence_score?: number;
}

export interface ValidatedSuggestionPackage {
  source_agent_type: string;
  source_agent_name: string;
  suggestion_details: SuggestionDetails;
  scva_report: any; 
  iscca_report: any; 
  validation_summary_score: string;
}

export interface SSEEventData {
  event_type: "system_log" | "progress" | "agent_suggestion_generated" | "validated_suggestion_package" | "warning" | "error" | "fatal_error" | "final_summary" | "clause_processing_start" | "clause_validation_result" | "clause_ai_suggestion_generated" | "clause_processing_end" | "full_contract_review_completed";
  message?: string; 
  step_code?: string;
  agent_name?: string;
  payload?: any | ValidatedSuggestionPackage | { total_validated_suggestions: number };
}


export const initializeSystem = async (formData: FormData): Promise<InitResponse> => {
  try {
    const response = await axios.post<InitResponse>(`${API_BASE_URL}/initialize`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    return response.data;
  } catch (error: any) {
    console.error("Error initializing system:", error.response?.data || error.message);
    throw error.response?.data || new Error("Network or initialization error");
  }
};

export const getAssistanceStreamUrl = (): string => `${API_BASE_URL}/get_assistance_stream`;

export const getApiStatus = async (): Promise<ApiStatusResponse> => {
    try {
        const response = await axios.get<ApiStatusResponse>(`${API_BASE_URL}/status`);
        return response.data;
    } catch (error: any) {
        console.error("Error fetching API status:", error.response?.data || error.message);
        throw error.response?.data || new Error("Network or status fetch error");
    }
};

// Add other API functions if needed (e.g., for contextual update agent)
export const analyzeContextualUpdate = async (payload: { new_context_text: string; target_document_id: string; }) => { // <--- ADDED EXPORT HERE
    const response = await axios.post(`${API_BASE_URL}/contextual_update/analyze`, payload);
    return response.data; 
};


